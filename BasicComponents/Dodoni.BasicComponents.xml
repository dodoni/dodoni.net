<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dodoni.BasicComponents</name>
    </assembly>
    <members>
        <member name="T:Dodoni.BasicComponents.ArrayMemory">
            <summary>Provides functions concerning memory allocation.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.ArrayMemory.Reallocate``1(``0[]@,System.Int32,System.Int32)">
            <summary>(Re-)Allocate memory for a specified array length.
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
            <param name="values">If <paramref name="values"/> contains less than <paramref name="minimalSize"/> elements an array with at least <paramref name="minimalSize"/> elements will be returned.</param>
            <param name="minimalSize">The minimal size of the array.</param>
            <param name="pufferSize">The size of the puffer.</param>
            <returns>A value indicating whether the elements of <paramref name="values"/> has been changed.</returns>
            <remarks>In the case of a memory allocation a array with at least <paramref name="minimalSize"/> plus <paramref name="pufferSize"/> will be created.</remarks>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.InfoOutputDetailLevel">
            <summary>Represents the level of detail for information output, i.e. taken into account for creation of 
            <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput"/> instances via <see cref="M:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.FillInfoOutput(Dodoni.BasicComponents.Containers.InfoOutput,System.String)"/>.
            </summary>
            <remarks>The level of info-output detail is used for example in the case of calibration, pricing etc. and indicates how 
            many informations will be exported via <see cref="M:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.FillInfoOutput(Dodoni.BasicComponents.Containers.InfoOutput,System.String)"/> after
            such a calculation. 
            <para>Each implementation may interpret the level of detail in a different way.</para></remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputDetailLevel.NoInfoOutput">
            <summary>No info-output, i.e. <see cref="M:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.FillInfoOutput(Dodoni.BasicComponents.Containers.InfoOutput,System.String)"/>  returns <c>false</c> in any case.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputDetailLevel.Low">
            <summary>Generate info-output with a low level of detail only.
            </summary>
            <remarks>In this case property values will be returned, but inhomogeneous data given
            as <see cref="T:System.Data.DataTable"/> objects will not be part of the info-output.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputDetailLevel.Middle">
            <summary>Generate info-output with a middle level of detail only.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputDetailLevel.High">
            <summary>Generate info-output with a high level of detail only.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputDetailLevel.Full">
            <summary>Generate info-output with all available informations.
            </summary>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.ItemAddedState">
            <summary>Represents the state of a adding operation with respect to <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/>.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.ItemAddedState.Rejected">
            <summary>The element to add has been rejected, i.e. the argument has not been added.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.ItemAddedState.Added">
            <summary>Some new element has beed added.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.ItemAddedState.Replaced">
            <summary>Some existing element has been replaced by an other instance.
            </summary>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.Extensions">
            <summary>Provides extension methods for classes of the namespace <c>Dodoni.BasicComponents.Containers</c>.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.Extensions.IsAtLeastAsComprehensiveAs(Dodoni.BasicComponents.Containers.InfoOutputDetailLevel,Dodoni.BasicComponents.Containers.InfoOutputDetailLevel)">
            <summary>Determines whether the current <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputDetailLevel"/> object is at least as comprehensive as an other <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputDetailLevel"/>.
            </summary>
            <param name="infoOutputDetailLevel">The info output detail level.</param>
            <param name="otherInfoOutputDetailLevel">The other info output detail level.</param>
            <returns><c>true</c> if the current <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputDetailLevel"/> object is at least as comprehensive as the other specified <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputDetailLevel"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.ItemAddingEventHandler">
            <summary>The delegate for the <see cref="E:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.Adding"/> event handling.
            </summary>
            <param name="sender">The sender, i.e. the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> instance.</param>
            <param name="eventArgs">The event arguments.</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.ItemAddedEventHandler">
            <summary>The delegate for the <see cref="E:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.Added"/> event handling.
            </summary>
            <param name="sender">The sender, i.e. the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> instance.</param>
            <param name="eventArgs">The event arguments.</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1">
            <summary>Represent a dictionary for nameable items.
            </summary>
            <typeparam name="TValue">The type of the underlying elements.</typeparam>
        </member>
        <member name="E:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.Adding">
            <summary>The event handler which will be raise before adding some new element into the pool.
            </summary>
        </member>
        <member name="E:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.Added">
            <summary>The event handler which will be raise after adding some new element into the pool.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> class.
            </summary>
            <param name="isReadOnlyExceptAdding">A value that determines if the dictionary is readonly (except adding new items); if <c>true</c> new items can be added, overwriting or removing is not allowed; otherwise there are not restrictions.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.#ctor(System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> can contain.</param>
            <param name="isReadOnlyExceptAdding">A value that determines if the dictionary is readonly (except adding new items); if <c>true</c> new items can be added, overwriting or removing is not allowed; otherwise there are not restrictions.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.#ctor(`0,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> class.
            </summary>
            <param name="value">The value to insert into the pool.</param>
            <param name="isReadOnlyExceptAdding">A value that determines if the dictionary is readonly (except adding new items); if <c>true</c> new items can be added, overwriting or removing is not allowed; otherwise there are not restrictions.</param>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> class.
            </summary>
            <param name="values">The values to insert into the pool.</param>
            <param name="isReadOnlyExceptAdding">A value that determines if the dictionary is readonly (except adding new items); if <c>true</c> new items can be added, overwriting or removing is not allowed; otherwise there are not restrictions.</param>
            <exception cref="T:System.NullReferenceException">Thrown, if one item of <paramref name="values"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.#ctor(`0[])">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> class.
            </summary>
            <param name="values">The values to insert into the pool.</param>
            <exception cref="T:System.NullReferenceException">Thrown, if one item of <paramref name="values"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.Add(`0)">
            <summary>Adds the specified value.
            </summary>
            <param name="value">The value to add into the current <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> instance.</param>
            <returns>A value indicating whether <paramref name="value"/> has been inserted.</returns>
            <remarks>If <paramref name="value"/> != <c>null</c> the <see cref="E:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.Adding"/> and <see cref="E:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.Added"/>
            event will be raise.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.Clear">
            <summary>Removes all keys and values from the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown, if this operation is not allowed.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.Remove(System.String)">
            <summary>Removes the value with the specified key from the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is sucessfully found and removed; otherwise, <c>false</c>. This method
            returns <c>false</c> if <paramref name="key"/> is not found in the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown, if this operation is not allowed.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.Remove(Dodoni.BasicComponents.IdentifierString)">
            <summary>Removes the value with the specified key from the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is sucessfully found and removed; otherwise, <c>false</c>. This method
            returns <c>false</c> if <paramref name="key"/> is not found in the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.OnAdding(Dodoni.BasicComponents.Containers.ItemAddingEventArgs)">
            <summary>Raises the <see cref="E:Adding"/> event.
            </summary>
            <param name="args">The <see cref="T:Dodoni.BasicComponents.Containers.ItemAddingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1.OnAdded(Dodoni.BasicComponents.Containers.ItemAddedEventArgs)">
            <summary>Raises the <see cref="E:Added"/> event.
            </summary>
            <param name="args">The <see cref="T:Dodoni.BasicComponents.Containers.ItemAddedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary">
            <summary>Provides static methods for creating <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> objects.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary.Create``1(``0)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> that contains <paramref name="value"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary.Create``1(``0,``0)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> that contains <paramref name="value1"/> and <paramref name="value2"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary.Create``1(``0,``0,``0)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="value3">The third value.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> that contains <paramref name="value1"/>, <paramref name="value2"/> and <paramref name="value3"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary.Create``1(``0[])">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="values">The values to add.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> that contains the elements of <paramref name="values"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="values"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary.ToIdNameableDictionary``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>Creates a <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> from a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TValue">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> from.</param>
            <param name="isReadOnlyExceptAdding">A value that determines if the dictionary is readonly (except adding new items); if <c>true</c> new items can be added, overwriting or removing is not allowed; otherwise there are not restrictions.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> that contains the elements from the input sequence.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1">
            <summary>Represents a collection of keys and values, where the key is a <see cref="T:Dodoni.BasicComponents.IdentifierString"/>.
            </summary>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> class.
            </summary>
            <param name="isReadOnlyExceptAdding">A value that determines if the dictionary is readonly (except adding new items); if <c>true</c> new items can be added, overwriting or removing is not allowed; otherwise there are not restrictions.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1.#ctor(System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> can contain.</param>
            <param name="isReadOnlyExceptAdding">A value that determines if the dictionary is readonly (except adding new items); if <c>true</c> new items can be added, overwriting or removing is not allowed; otherwise there are not restrictions.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1.AsReadOnly">
            <summary>Returns a read-only <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/> wrapper for the current dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1.Add(System.String,`0)">
            <summary>Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <returns>A value indicating whether <paramref name="value"/> has been inserted.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1.Add(Dodoni.BasicComponents.IdentifierString,`0)">
            <summary>Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <returns>A value indicating whether <paramref name="value"/> has been inserted.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1.Clear">
            <summary>Removes all keys and values from the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown, if this operation is not allowed.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1.Remove(System.String)">
            <summary>Removes the value with the specified key from the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is sucessfully found and removed; otherwise, <c>false</c>. This method
            returns <c>false</c> if <paramref name="key"/> is not found in the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown, if this operation is not allowed.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1.Remove(Dodoni.BasicComponents.IdentifierString)">
            <summary>Removes the value with the specified key from the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is sucessfully found and removed; otherwise, <c>false</c>. This method
            returns <c>false</c> if <paramref name="key"/> is not found in the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary">
            <summary>Provides static methods for creating <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> objects.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary.Create``1(Dodoni.BasicComponents.IdentifierString,``0)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of the <paramref name="value"/>.</param>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> that contains <paramref name="value"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary.Create``1(System.String,``0)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of the <paramref name="value"/>.</param>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> that contains <paramref name="value"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary.Create``1(Dodoni.BasicComponents.IdentifierString,``0,Dodoni.BasicComponents.IdentifierString,``0)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name1">The name of <paramref name="value1"/>.</param>
            <param name="value1">The first value.</param>
            <param name="name2">The name of <paramref name="value2"/>.</param>
            <param name="value2">The second value.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> that contains <paramref name="value1"/> and <paramref name="value2"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary.Create``1(System.String,``0,System.String,``0)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name1">The name of <paramref name="value1"/>.</param>
            <param name="value1">The first value.</param>
            <param name="name2">The name of <paramref name="value2"/>.</param>
            <param name="value2">The second value.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> that contains <paramref name="value1"/> and <paramref name="value2"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary.Create``1(Dodoni.BasicComponents.IdentifierString,``0,Dodoni.BasicComponents.IdentifierString,``0,Dodoni.BasicComponents.IdentifierString,``0)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name1">The name of <paramref name="value1"/>.</param>
            <param name="value1">The first value.</param>
            <param name="name2">The name of <paramref name="value2"/>.</param>
            <param name="value2">The second value.</param>
            <param name="name3">The name of <paramref name="value3"/>.</param>
            <param name="value3">The third value.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> that contains <paramref name="value1"/>, <paramref name="value2"/> and <paramref name="value3"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary.Create``1(System.String,``0,System.String,``0,System.String,``0)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name1">The name of <paramref name="value1"/>.</param>
            <param name="value1">The first value.</param>
            <param name="name2">The name of <paramref name="value2"/>.</param>
            <param name="value2">The second value.</param>
            <param name="name3">The name of <paramref name="value3"/>.</param>
            <param name="value3">The third value.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> that contains <paramref name="value1"/>, <paramref name="value2"/> and <paramref name="value3"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary.Create``1(System.Tuple{System.String,``0}[])">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="values">The values to add.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> that contains the elements of <paramref name="values"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="values"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary.Create``1(System.Tuple{Dodoni.BasicComponents.IdentifierString,``0}[])">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="values">The values to add.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> that contains the elements of <paramref name="values"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="values"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary.ToIdStringDictionary``1(System.Collections.Generic.IEnumerable{System.Tuple{Dodoni.BasicComponents.IdentifierString,``0}},System.Boolean)">
            <summary>Creates a <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> from a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TValue">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/> from.</param>
            <param name="isReadOnlyExceptAdding">A value that determines if the dictionary is readonly (except adding new items); if <c>true</c> new items can be added, overwriting or removing is not allowed; otherwise there are not restrictions.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionary`1"/> that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary.TryGetValue``1(Dodoni.BasicComponents.Containers.IIdentifierStringDictionary{``0},System.String,``0@)">
            <summary>Gets the value associated with the specified key.
            </summary>
            <param name="idStringDictionary">The <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/>.</param>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method return, contains the value associated with the specified key, if the
            key is found; otherwise, the default value for the type of the value parameter. This parameter 
            is passed uninitialized.</param>
            <returns><c>true</c> if the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> contains an element with the specified key; otherwise <c>false</c>.</returns>
            <remarks>In .NET 4.0 out parameters are not allowed for covariant generic types, therefore it is not possible
            to add this method to the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> class. This is a workaround.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionary.TryGetValue``1(Dodoni.BasicComponents.Containers.IIdentifierStringDictionary{``0},Dodoni.BasicComponents.IdentifierString,``0@)">
            <summary>Gets the value associated with the specified key.
            </summary>
            <param name="idStringDictionary">The <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/>.</param>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method return, contains the value associated with the specified key, if the
            key is found; otherwise, the default value for the type of the value parameter. This parameter 
            is passed uninitialized.</param>
            <returns><c>true</c> if the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> contains an element with the specified key; otherwise <c>false</c>.</returns>
            <remarks>In .NET 4.0 out parameters are not allowed for covariant generic types, therefore it is not possible
            to add this method to the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> class. This is a workaround.</remarks>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1">
            <summary>Serves as base class for a collection of keys and values, where the key is a <see cref="T:Dodoni.BasicComponents.IdentifierString"/>.
            </summary>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.m_Dictionary">
            <summary>The encapsulated dictionary, where the key is the identifier string representation and the value contains the objects.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.IsReadOnlyExceptAdding">
            <summary>A value that determines if the dictionary is readonly (except adding new items); if <c>true</c> new items can be added, overwriting or removing is not allowed; otherwise there are not restrictions.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.#ctor(Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase{`0})">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/> class.
            </summary>
            <param name="identifierStringDictionaryBase">The identifier string dictionary base.</param>
            <remarks>This copy constructor creats a deep copy of the argument.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/> class.
            </summary>
            <param name="isReadOnlyExceptAdding">A value that determines if the dictionary is readonly (except adding new items); if <c>true</c> new items can be added, overwriting or removing is not allowed; otherwise there are not restrictions.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.#ctor(System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/> can contain.</param>
            <param name="isReadOnlyExceptAdding">A value that determines if the dictionary is readonly (except adding new items); if <c>true</c> new items can be added, overwriting or removing is not allowed; otherwise there are not restrictions.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.Count">
            <summary>Gets the number of key/value pairs contained in the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/>.
            </summary>
            <value>The number of key/value pairs.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.Names">
            <summary>Gets the (non-normalized) names of the objects in the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> instance in its <see cref="T:System.String"/> representation.
            </summary>
            <value>The names of the items in its <see cref="T:System.String"/> representation.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.Item(System.String)">
            <summary>Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, a get operation
            throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new element with the specified key.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.Item(Dodoni.BasicComponents.IdentifierString)">
            <summary>Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, a get operation
            throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new element with the specified key.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.NamedValues">
            <summary>Gets a collection of the values and the corresponding name in its <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.
            </summary>
            <value>The item values and names.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.Values">
            <summary>Gets a collection containing the values in the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/>.
            </summary>
            <value>A collection containing the values.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.GetNamesAsIdentifierStrings">
            <summary>Gets the names of the objects in the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> instance in its <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.
            </summary>
            <returns>The names of the items in its <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.ContainsKey(System.String)">
            <summary>Determines whether the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/>.</param>
            <returns><c>true</c> if the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.ContainsKey(Dodoni.BasicComponents.IdentifierString)">
            <summary>Determines whether the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/>.</param>
            <returns><c>true</c> if the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.TryGetValue(System.String,`0@)">
            <summary>Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method return, contains the value associated with the specified key, if the
            key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/> contains an element with the specified key; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.TryGetValue(Dodoni.BasicComponents.IdentifierString,`0@)">
            <summary>Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method return, contains the value associated with the specified key, if the
            key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/> contains an element with the specified key; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.Add(System.String,`0)">
            <summary>Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <returns>A value indicating whether <paramref name="value"/> has been inserted.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.Add(Dodoni.BasicComponents.IdentifierString,`0)">
            <summary>Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <returns>A value indicating whether <paramref name="value"/> has been inserted.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.Clear">
            <summary>Removes all keys and values from the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown, if this operation is not allowed.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.Remove(System.String)">
            <summary>Removes the value with the specified key from the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is sucessfully found and removed; otherwise, <c>false</c>. This method
            returns <c>false</c> if <paramref name="key"/> is not found in the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown, if this operation is not allowed.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.Remove(Dodoni.BasicComponents.IdentifierString)">
            <summary>Removes the value with the specified key from the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is sucessfully found and removed; otherwise, <c>false</c>. This method
            returns <c>false</c> if <paramref name="key"/> is not found in the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IdentifierStringDictionaryBase`1.GetDeepCopy">
            <summary>Gets a deep copy of the current instance.
            </summary>
            <returns>A deep copy of the current instance.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1">
            <summary>Serves as covariant (read-only) interface for a dictionary, where the key is a <see cref="T:Dodoni.BasicComponents.IdentifierString"/>.
            </summary>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <remarks>In .NET 4.0 out parameters are not allowed for covariant generic types, thus <c>TryGetValue</c> methods are implemented
            as some extension methods. Moreover out parameters are allowed for interfaces only.</remarks>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1.Count">
            <summary>Gets the number of key/value pairs contained in the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/>.
            </summary>
            <value>The number of key/value pairs.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1.Names">
            <summary>Gets the (non-normalized) names of the objects in the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> instance in its <see cref="T:System.String"/> representation.
            </summary>
            <value>The names of the items in its <see cref="T:System.String"/> representation.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1.Item(System.String)">
            <summary>Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <value>The value associated with the specified key. If the specified key is not found, a get operation
            throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new element with the specified key.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1.Item(Dodoni.BasicComponents.IdentifierString)">
            <summary>Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <value>The value associated with the specified key. If the specified key is not found, a get operation
            throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new element with the specified key.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1.GetNamesAsIdentifierStrings">
            <summary>Gets the names of the objects in the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> instance in its <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.
            </summary>
            <returns>The names of the items in its <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1.ContainsKey(System.String)">
            <summary>Determines whether the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/>.</param>
            <returns><c>true</c> if the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> contains an element with 
            the	specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1.ContainsKey(Dodoni.BasicComponents.IdentifierString)">
            <summary>Determines whether the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/>.</param>
            <returns><c>true</c> if the <see cref="T:Dodoni.BasicComponents.Containers.IIdentifierStringDictionary`1"/> contains an element with 
            the	specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.IInfoOutputQueriable">
            <summary>Serves as interface for classes which may contain additional information as for example calibration results, the values of some (curve) parametrisation etc. 
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.InfoOutputDetailLevel">
            <summary>Gets the info-output level of detail.
            </summary>
            <value>The info-output level of detail.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.TrySetInfoOutputDetailLevel(Dodoni.BasicComponents.Containers.InfoOutputDetailLevel)">
            <summary>Sets the <see cref="P:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.InfoOutputDetailLevel"/> property.
            </summary>
            <param name="infoOutputDetailLevel">The info-output level of detail.</param>
            <returns>A value indicating whether the <see cref="P:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.InfoOutputDetailLevel"/> has been set to <paramref name="infoOutputDetailLevel"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.FillInfoOutput(Dodoni.BasicComponents.Containers.InfoOutput,System.String)">
            <summary>Gets informations of the current object as a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput"/> instance.
            </summary>
            <param name="infoOutput">The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput"/> object which is to be filled with information concering the current instance.</param>
            <param name="categoryName">The name of the category, i.e. all information will be added to these category.</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.InfoOutput">
            <summary>Represents information of a specific object, for example the result of a calibration, the parameters of some (curve) parametrization etc.
            </summary>
            <remarks>The output contains a collection of <see cref="T:System.Data.DataTable"/> instances with homogeneous information
            as well as a collection of properties, i.e. name/value pairs represented by a list of <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> instances.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutput.GeneralCategoryName">
            <summary>The name of the 'general' category.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutput.m_Values">
            <summary>The collection of properties and tables, where the key represents the category.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutput.sm_GeneralCategoryIdentifierStringName">
            <summary>The <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation of <see cref="F:Dodoni.BasicComponents.Containers.InfoOutput.GeneralCategoryName"/>.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput"/> class.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutput.Count">
            <summary>Gets the number of <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> objects.
            </summary>
            <value>The number of <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> objects.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutput.CategoryNames">
            <summary>Gets the category names.
            </summary>
            <value>The category names.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutput.Item(System.String)">
            <summary>Gets the <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> with the specified category name.
            </summary>
            <param name="categoryName">The name of the category, i.e. 'general' etc.</param>
            <value>The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to a specific category name.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutput.Item(Dodoni.BasicComponents.IdentifierString)">
            <summary>Gets the <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> with the specified category name.
            </summary>
            <param name="categoryName">The name of the category, i.e. 'general' etc.</param>
            <value>The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to a specific category name.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput.TryGetPackage(System.String,Dodoni.BasicComponents.Containers.InfoOutputPackage@)">
            <summary>Gets a <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to a specific category name.
            </summary>
            <param name="categoryName">The name of the category, i.e. 'general' etc.</param>
            <param name="value">The value (output).</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput.TryGetPackage(Dodoni.BasicComponents.IdentifierString,Dodoni.BasicComponents.Containers.InfoOutputPackage@)">
            <summary>Gets a <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to a specific category name.
            </summary>
            <param name="categoryName">The name of the category, i.e. 'general' etc.</param>
            <param name="value">The value (output).</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput.GetGeneralPackage">
            <summary>Gets the <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to the category <see cref="F:Dodoni.BasicComponents.Containers.InfoOutput.GeneralCategoryName"/>.
            </summary>
            <returns>The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to the <see cref="F:Dodoni.BasicComponents.Containers.InfoOutput.GeneralCategoryName"/>.</returns>
            <remarks>If no there is no general <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object available it will be created, stored internally and returned.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput.AcquirePackage(System.String)">
            <summary>Acquires a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to a specified category name; if no package available with the
            desired name a new <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object will be created, stored internally and returned to the caller.
            </summary>
            <param name="categoryName">The name of the category, i.e. 'general' etc.</param>
            <returns>The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to the <paramref name="categoryName"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput.AcquirePackage(Dodoni.BasicComponents.IdentifierString)">
            <summary>Acquires a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to a specified category name; if no package available with the
            desired name a new <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object will be created, stored internally and returned to the caller.
            </summary>
            <param name="categoryName">The name of the category, i.e. 'general' etc.</param>
            <returns>The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to the <paramref name="categoryName"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput.GetPackage(System.String)">
            <summary>Gets a <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to a specific category name.
            </summary>
            <param name="categoryName">The name of the category, i.e. 'general' etc.</param>
            <returns>The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> in the current instance with respect to the <paramref name="categoryName"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown, if no <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with category name <paramref name="categoryName"/> available.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput.GetPackage(Dodoni.BasicComponents.IdentifierString)">
            <summary>Gets a <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with respect to a specific category name.
            </summary>
            <param name="categoryName">The name of the category, i.e. 'general' etc.</param>
            <returns>The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> in the current instance with respect to the <paramref name="categoryName"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown, if no <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> object with category name <paramref name="categoryName"/> available.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput.Create``1(``0,System.Action{Dodoni.BasicComponents.Containers.InfoOutput,System.String},Dodoni.BasicComponents.Containers.InfoOutputDetailLevel)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput`1"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="infoOutputFillMethod">A delegate which is used to fill the info output, i.e. adds a collection of <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> and tables to a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput"/> object.</param>
            <param name="infoOutputDetailLevel">The info output detail level which is used for information only and can not be changed.</param>
            <typeparam name="T">The type of the encapuslated object.</typeparam>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.InfoOutput`1">
            <summary>Represents a wrapper of a specific object which does not supports the <see cref="T:Dodoni.BasicComponents.Containers.IInfoOutputQueriable"/> interface and adds a <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput"/> instance.
            </summary>
            <typeparam name="T">The type of the encapuslated object.</typeparam>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutput`1.Value">
            <summary>The value, i.e. the encapsulated object.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutput`1.m_OutputDetailLevel">
            <summary>The level of details.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutput`1.m_InfoOutput">
            <summary>The delegate, which fills the 'info' output, i.e. properties and tables.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput`1.#ctor(`0,System.Action{Dodoni.BasicComponents.Containers.InfoOutput,System.String},Dodoni.BasicComponents.Containers.InfoOutputDetailLevel)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="infoOutputFillMethod">A delegate which is used to fill the info output, i.e. adds a collection of <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> and tables to a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput"/> object.</param>
            <param name="infoOutputDetailLevel">The info output detail level which is used for information only and can not be changed.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutput`1.InfoOutputDetailLevel">
            <summary>Gets the info-output level of detail.
            </summary>
            <value>The info-output level of detail.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput`1.FillInfoOutput(Dodoni.BasicComponents.Containers.InfoOutput,System.String)">
            <summary>Gets informations of the current object as a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput"/> instance.
            </summary>
            <param name="infoOutput">The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput"/> object which is to be filled with informations concering the current instance.</param>
            <param name="categoryName">The name of the category, i.e. all informations will be added to these category name.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput`1.TrySetInfoOutputDetailLevel(Dodoni.BasicComponents.Containers.InfoOutputDetailLevel)">
            <summary>Sets the <see cref="P:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.InfoOutputDetailLevel"/> property.
            </summary>
            <param name="infoOutputDetailLevel">The info-output level of detail.</param>
            <returns>A value indicating whether the <see cref="P:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.InfoOutputDetailLevel"/> has been set to <paramref name="infoOutputDetailLevel"/>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutput`1.op_Implicit(Dodoni.BasicComponents.Containers.InfoOutput{`0})~`0">
            <summary>Performs an implicit conversion from <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="infoOutput">The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput`1"/> object.</param>
            <returns>The result of the conversion, i.e. <see cref="F:Dodoni.BasicComponents.Containers.InfoOutput`1.Value"/>.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.InfoOutputPackage">
            <summary>Represents a collection of <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> and <see cref="T:System.Data.DataTable"/> objects.
            </summary>    
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType">
            <summary>The type of a specific <see cref="T:System.Data.DataTable"/> object that represents output of a specific <see cref="T:Dodoni.BasicComponents.Containers.IInfoOutputQueriable"/> object.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType.None">
            <summary>'None', i.e. ignoring all <see cref="T:System.Data.DataTable"/> objects. 
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType.Single">
            <summary>A 'single' <see cref="T:System.Data.DataTable"/> object, i.e. neither a parent nor a child table.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType.Parent">
            <summary>A 'parent' <see cref="T:System.Data.DataTable"/> object, i.e. linked to a specific child table.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType.Child">
            <summary>A 'child' <see cref="T:System.Data.DataTable"/> object, i.e. linked to a secific parent table.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType.Arbitrary">
            <summary>An arbitrary <see cref="T:System.Data.DataTable"/> object.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.GeneralPropertyGroupName">
            <summary>The (group) name of the collection of general properites.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.ParentChildTableNameSeparator">
            <summary>The separator used to separate the parent and child <see cref="T:System.Data.DataTable"/> objects, for example "parentTableName->childTableName".
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.m_Name">
            <summary>The name of the <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/>.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.m_Tables">
            <summary>A collection of <see cref="T:System.Data.DataTable"/> objects, where the key is the name of the table.
            </summary>
            <remarks>The table name of an <see cref="T:System.Data.DataTable"/> object can be changed.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.m_ParentChildTables">
            <summary>The collection of <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable"/> objects, where the key is the name of the parent table.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.m_Properties">
            <summary>A collection of <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> objects, where the first key is the property group name ('general properties' etc.) and the second key is the 
            name of the property itself. 
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.m_GeneralProperties">
            <summary>A collection of 'general properties', i.e. the elements of <see cref="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.m_Properties"/>, where the key is equal to <see cref="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.GeneralPropertyGroupName"/>,
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.#ctor(Dodoni.BasicComponents.IdentifierString)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> class.
            </summary>
            <param name="categoryName">The name of the category, i.e. the name of the current instance.</param>        
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputPackage"/> class.
            </summary>
            <param name="categoryName">The name of the category, i.e. the name of the current instance.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputPackage.Dodoni#BasicComponents#IIdentifierNameable#Name">
            <summary>Gets the name of the current instance.
            </summary>
            <value>The language independent name of the current instance.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputPackage.Dodoni#BasicComponents#IIdentifierNameable#LongName">
            <summary>Gets the long name of the current instance.
            </summary>
            <value>The language dependent long name of the current instance.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputPackage.CategoryName">
            <summary>Gets the name of the category.
            </summary>
            <value>The name of the category.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputPackage.GeneralProperties">
            <summary>Gets the collection of general properties, i.e. name/value pairs, where the key represents the name of the property.
            </summary>
            <value>The general properties.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputPackage.PropertyGroupNames">
            <summary>Gets the name of the property groups, i.e. 'general properties' etc.
            </summary>
            <value>The property group names.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputPackage.Properties">
            <summary>Gets the collection of properties, where the first component is the property group name (i.e. 'General Properties' etc.)  and the second component is the collection of 
            the corresponding properties.
            </summary>
            <value>The collection of properties.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputPackage.ParentChildDataTables">
            <summary>Gets the collection of <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable"/> objects (as well as the unique identifier) that
            represents parent/child <see cref="T:System.Data.DataTable"/> objects with a 1:n relation.
            </summary>
            <value>The parent/child data tables as well a unique identifier in its <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.GetDataTables(Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType)">
            <summary>Gets the <see cref="T:System.Data.DataTable"/> objects with homogeneous informations, and the table name in its <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.
            </summary>
            <param name="dataTableType">The type of the tables to take into account.</param>
            <returns>The tables and table names.</returns>
            <remarks>The table name of an <see cref="T:System.Data.DataTable"/> object can be changed.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.GetDataTableNames(Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType)">
            <summary>Gets the table names.
            </summary>
            <param name="dataTableType">The type of the tables to take into account.</param>
            <returns>The table names.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.TryGetDataTable(System.String,System.Data.DataTable@,Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType)">
            <summary>Gets a specific <see cref="T:System.Data.DataTable"/> object.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="value">The <see cref="T:System.Data.DataTable"/>  (output).</param>
            <param name="dataTableType">The type of the tables to take into account.</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.GetDataTable(System.String,Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType)">
            <summary>Gets a specific <see cref="T:System.Data.DataTable"/> object.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="dataTableType">The type of the tables to take into account.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> with the desired name.</returns>
            <exception cref="T:System.ArgumentException">Thrown, if no table available with the desired name.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.TryGetDataTable(Dodoni.BasicComponents.IdentifierString,System.Data.DataTable@,Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType)">
            <summary>Gets a specific <see cref="T:System.Data.DataTable"/> object.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="value">The <see cref="T:System.Data.DataTable"/> and its name in its <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation (output).</param>
            <param name="dataTableType">The type of the tables to take into account.</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.GetDataTable(Dodoni.BasicComponents.IdentifierString,Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType)">
            <summary>Gets a specific <see cref="T:System.Data.DataTable"/> object.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="dataTableType">The type of the tables to take into account.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> with the desired name.</returns>
            <exception cref="T:System.ArgumentException">Thrown, if no table available with the desired name.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.TryGetParentChildDataTable(System.String,Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable@)">
            <summary>Gets a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable"/> object, i.e. one parent and one child <see cref="T:System.Data.DataTable"/> object, 
            connected with respect to a specified relation.
            </summary>
            <param name="parentDataTableName">The name of the parent data table.</param>
            <param name="value">The value.</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.GetParentChildDataTable(System.String)">
            <summary>Gets a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable"/> object, i.e. one parent and one child <see cref="T:System.Data.DataTable"/> object, 
            connected with respect to a specified relation.
            </summary>
            <param name="parentDataTableName">The name of the parent data table.</param>
            <returns>The requested <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable"/> object.</returns>
            <exception cref="T:System.ArgumentException">Thrown, if no data available with the desired name.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.TryGetProperty(System.String,Dodoni.BasicComponents.Containers.InfoOutputProperty@,System.String)">
            <summary>Gets a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> object with repsect to a specific property group name.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The property (output).</param>
            <param name="propertyGroupName">The name of the property group (i.e. 'General Properties' etc.).</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.GetProperty(System.String,System.String)">
            <summary>Gets a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> object with repsect to a specific property group name.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyGroupName">The name of the property group (i.e. 'General Properties' etc.).</param>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentException">Thrown, if no property available with the desired name.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.TryGetProperty(System.String,Dodoni.BasicComponents.Containers.InfoOutputProperty@,Dodoni.BasicComponents.IdentifierString)">
            <summary>Gets a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> object with repsect to a specific property group name.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The property (output).</param>
            <param name="propertyGroupName">The name of the property group (i.e. 'General Properties' etc.).</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.GetProperty(System.String,Dodoni.BasicComponents.IdentifierString)">
            <summary>Gets a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> object with repsect to a specific property group name.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyGroupName">The name of the property group (i.e. 'General Properties' etc.).</param>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentException">Thrown, if no property available with the desired name.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.TryGetProperties(System.String,Dodoni.BasicComponents.Containers.IIdentifierStringDictionary{Dodoni.BasicComponents.Containers.InfoOutputProperty}@)">
            <summary>Gets the collection of properties with respect to a specific property group name.
            </summary>
            <param name="propertyGroupName">The name of the property group (i.e. 'General Properties' etc.).</param>
            <param name="value">The property collection (output).</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.GetProperties(System.String)">
            <summary>Gets the collection of properties with respect to a specific property group name.
            </summary>
            <param name="propertyGroupName">The name of the property group (i.e. 'General Properties' etc.).</param>
            <returns>The property collection.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.TryGetProperties(Dodoni.BasicComponents.IdentifierString,Dodoni.BasicComponents.Containers.IIdentifierStringDictionary{Dodoni.BasicComponents.Containers.InfoOutputProperty}@)">
            <summary>Gets the collection of properties with respect to a specific property group name.
            </summary>
            <param name="propertyGroupName">The name of the property group (i.e. 'General Properties' etc.).</param>
            <param name="value">The property collection (output).</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.GetProperties(Dodoni.BasicComponents.IdentifierString)">
            <summary>Gets the collection of properties with respect to a specific property group name.
            </summary>
            <param name="propertyGroupName">The name of the property group (i.e. 'General Properties' etc.).</param>
            <returns>The property collection.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.TryGetGeneralProperty(System.String,Dodoni.BasicComponents.Containers.InfoOutputProperty@)">
            <summary>Gets a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> object which represents the value of a property with respect to <see cref="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.GeneralPropertyGroupName"/>.
            </summary>
            <param name="propertyName">The name of the general property.</param>
            <param name="value">The general property (output).</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.TryGetGeneralProperty(Dodoni.BasicComponents.IdentifierString,Dodoni.BasicComponents.Containers.InfoOutputProperty@)">
            <summary>Gets a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> object which represents the value of a property with respect to <see cref="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.GeneralPropertyGroupName"/>.
            </summary>
            <param name="propertyName">The name of the general property.</param>
            <param name="value">The general property (output).</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.Add(System.Data.DataTable)">
            <summary>Adds a specified <see cref="T:System.Data.DataTable"/> object, i.e. with respect to <see cref="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.DataTableType.Single"/>. 
            </summary>
            <param name="value">Homogeneous informations in some <see cref="T:System.Data.DataTable"/> representation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if the table name of <paramref name="value"/> is empty.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.Add(Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable)">
            <summary>Adds a specified <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable"/> object, i.e. a parent and child <see cref="T:System.Data.DataTable"/> object with a 1:n relation. 
            </summary>
            <param name="value">Homogeneous informations in some <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable"/> representation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if the table name(s) of <paramref name="value"/> is empty.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.Add(System.Data.DataTable,System.Data.DataTable,System.Data.DataColumn,System.Data.DataColumn)">
            <summary>Adds a specified <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable"/> object, i.e. a parent and child <see cref="T:System.Data.DataTable"/> object with a 1:n relation. 
            </summary>
            <param name="parentDataTable">The parent data table.</param>
            <param name="childDataTable">The child data table.</param>
            <param name="parentDataColumn">The parent data column, i.e. the column with respect to the relation between parent und child data table.</param>
            <param name="childDataColumn">The child data column, i.e. the column with respect to the relation between parent und child data table.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.Add(System.String,Dodoni.BasicComponents.Containers.InfoOutputProperty[])">
            <summary>Adds a specified collection of <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> objects to the current instance.
            </summary>
            <param name="propertyGroupName">The name of the property group (i.e. 'General Properties' etc.).</param>
            <param name="properties">The properties to add, if <c>null</c> an empty property group will be added.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.Add(Dodoni.BasicComponents.Containers.InfoOutputProperty[])">
            <summary>Adds a specified collection of <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> objects to the current instance with respect to <see cref="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.GeneralPropertyGroupName"/>.
            </summary>
            <param name="generalProperties">The general properties to add.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.Add(System.String,System.Object)">
            <summary>Adds a specific property to the current instance with respect to <see cref="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.GeneralPropertyGroupName"/>.
            </summary>
            <param name="generalPropertyName">The name of the general property.</param>
            <param name="generalPropertyValue">The value of the general property.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputPackage.Add(System.String,System.Object,System.String)">
            <summary>Adds a specific property to the current instance with respect to <see cref="F:Dodoni.BasicComponents.Containers.InfoOutputPackage.GeneralPropertyGroupName"/>.
            </summary>
            <param name="generalPropertyName">The name of the general property.</param>
            <param name="generalPropertyValue">The value of the general property.</param>
            <param name="annotation">A description of the property.</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable">
            <summary>Serves as wrapper for two <see cref="T:System.Data.DataTable"/> objects which are connected with respect
            to a 1:n relation, i.e. a parent data table and a child data table.
            </summary>
            <remarks>The relation is linked to a single column of the parent data table as well as one 
            single column of the child data table.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable.m_DataSet">
            <summary>The dataset.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable.m_ParentDataTable">
            <summary>The parent data table.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable.m_ChildDataTable">
            <summary>The child data table.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable.m_Relation">
            <summary>The 1:n relation between parent and child data table.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable.#ctor(System.Data.DataTable,System.Data.DataTable,System.Data.DataColumn,System.Data.DataColumn)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable"/> class.
            </summary>
            <param name="parentDataTable">The parent data table.</param>
            <param name="childDataTable">The child data table.</param>
            <param name="parentDataColumn">The parent data column, i.e. the column with respect to the relation between parent und child data table.</param>
            <param name="childDataColumn">The child data column, i.e. the column with respect to the relation between parent und child data table.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable.DataSet">
            <summary>Gets the <see cref="P:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable.DataSet"/> object.
            </summary>
            <value>The <see cref="P:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable.DataSet"/> object.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable.ParentDataTable">
            <summary>Gets the parent data table.
            </summary>
            <value>The parent data table.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable.ChildDataTable">
            <summary>Gets the child data table.
            </summary>
            <value>The child data table.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputParentChildDataTable.Relation">
            <summary>Gets the 1:n relation between parent and child data table.
            </summary>
            <value>The relation.</value>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.InfoOutputProperty">
            <summary>Serves as property (i.e. name/value pair) representation of a specific information with respect to <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput"/>.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputProperty.m_IdPropertyName">
            <summary>The property name in its identifier string representation.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputProperty.m_Annotation">
            <summary>The annotation of the property, perhaps <c>null</c>.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.InfoOutputProperty.Value">
            <summary>The value of the property in its <see cref="T:System.Object"/> representation.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputProperty.Name">
            <summary>Gets the name of the property in its <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.
            </summary>
            <value>The language independent name of the current instance.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputProperty.Dodoni#BasicComponents#IIdentifierNameable#LongName">
            <summary>Gets the long name of the current instance, i.e. <see cref="P:Dodoni.BasicComponents.Containers.InfoOutputProperty.Name"/> in its <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.
            </summary>
            <value>The language dependent long name of the current instance.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputProperty.Dodoni#BasicComponents#IAnnotatable#HasReadOnlyAnnotation">
            <summary>Gets a value indicating whether the annotation is readonly.
            </summary>
            <value><c>true</c> if the annotation of this instance is readonly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.InfoOutputProperty.Annotation">
            <summary>Gets the annotation of the current instance.
            </summary>
            <value>The annotation of the current instance.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputProperty.#ctor(System.String,System.Object,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> class.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyValue">The value of the property.</param>
            <param name="annotation">A annotation of the property in its <see cref="T:System.String"/> representation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="propertyName"/> or <paramref name="propertyValue"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if <paramref name="propertyName"/> represents the empty string.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputProperty.TrySetAnnotation(System.String)">
            <summary>Sets the annotation of the current instance.
            </summary>
            <param name="annotation">The annotation.</param>
            <returns>A value indicating whether the <see cref="P:Dodoni.BasicComponents.Containers.InfoOutputProperty.Annotation"/> has been changed.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputProperty.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.InfoOutputProperty.Create(System.String,System.Object,System.String)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Containers.InfoOutputProperty"/> object.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyValue">The value of the property.</param>
            <param name="annotation">A annotation of the property in its <see cref="T:System.String"/> representation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="propertyName"/> or <paramref name="propertyValue"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if <paramref name="propertyName"/> represents the empty string.</exception>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.ItemAddedEventArgs">
            <summary>Represents the event data for the event that will be raised after adding a new item into a specific <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> instance.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.ItemAddedEventArgs.NewItem">
            <summary>The new object to add into the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> object.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.ItemAddedEventArgs.State">
            <summary>The state.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.ItemAddedEventArgs.#ctor(Dodoni.BasicComponents.IIdentifierNameable,Dodoni.BasicComponents.Containers.ItemAddedState)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.ItemAddedEventArgs"/> class.
            </summary>
            <param name="newItem">The new element that has been added into some <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> instance.</param>
            <param name="state">The state.</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.ItemAddingEventArgs">
            <summary>Represents the event data for the event that will be raised before adding a new item into a specific <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> object.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.ItemAddingEventArgs.NewItem">
            <summary>The new object to add into the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> instance.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.ItemAddingEventArgs.OldItem">
            <summary>The item of the <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> object that will be replaced by <see cref="F:Dodoni.BasicComponents.Containers.ItemAddingEventArgs.NewItem"/>; or <c>null</c> if no such element exists.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.ItemAddingEventArgs.Cancel">
            <summary>A value indicating whether the adding of <see cref="F:Dodoni.BasicComponents.Containers.ItemAddingEventArgs.NewItem"/> will be canceled.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.ItemAddingEventArgs.#ctor(Dodoni.BasicComponents.IIdentifierNameable,Dodoni.BasicComponents.IIdentifierNameable)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.ItemAddingEventArgs"/> class.
            </summary>
            <param name="newItem">The new element to add into a specific <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> instance.</param>
            <param name="oldItem">The element of a specific <see cref="T:Dodoni.BasicComponents.Containers.IdentifierNameableDictionary`1"/> object which will
            be replaced by <paramref name="newItem"/>; or <c>null</c> if no such element exists.</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1">
            <summary>Serves as wrapper for a generic read-only collection; similar to <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>. Additional features are an increment and 
            start offset for the encapsulated collection.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="T:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Enumerator">
            <summary>The implementation of the Enumerator.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Enumerator.m_CurrentIndex">
            <summary>The current position in the list to wrap.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Enumerator.m_CurrentNumber">
            <summary>The current number of the list, i.e. from 0 up to count -1. Initially set to -1.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Enumerator.#ctor(Dodoni.BasicComponents.Containers.SmartReadOnlyCollection{`0})">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Enumerator"/> class.
            </summary>
            <param name="smartReadOnlyCollection">The smart read only collection.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Enumerator.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Enumerator.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Enumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Enumerator.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.m_Count">
            <summary>The number of elements in the list.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.m_List">
            <summary>The list to wrap.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.m_StartIndex">
            <summary>The null-based start index of the list to take into account.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.m_Increment">
            <summary>The increment of the list to take into account.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.#ctor(System.Int32,System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1"/> class that is a read-only wrapper around the specified list.
            </summary>
            <param name="count">The number of elements of <paramref name="list"/> to take into account.</param>
            <param name="list">The list to wrap.</param>
            <param name="startIndex">The null-based start index of the <paramref name="list"/> to take into account.</param>
            <param name="increment">The increment of <paramref name="list"/> to take into account.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.
            </summary>
            <value>The element at the specified index.</value>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown, if <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown, if The property is set.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.IndexOf(`0)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Insert(System.Int32,`0)">
            <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.NotSupportedException">Thrown, if the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">Thrown, if the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Add(`0)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">Thrown, if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown, if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Contains(`0)">
            <summary> Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. 
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.IsReadOnly">
            <summary>Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>;
            otherwise, <c>false</c>. This method also returns <c>false</c> if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">Thrown, if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Add(System.Object)">
            <summary>Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only -or- the <see cref="T:System.Collections.IList"/> has a fixed size.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Contains(System.Object)">
            <summary>Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns><c>true</c> if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.IndexOf(System.Object)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of <paramref name="value"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Insert(System.Int32,System.Object)">
            <summary>Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only -or- the <see cref="T:System.Collections.IList"/> has a fixed size.</exception>
            <exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.IsFixedSize">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.Remove(System.Object)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.
            </summary>
            <value>The element at the specified index.</value>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown, if <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown, if The property is set.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional -or- the number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns><c>true</c> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Dodoni.BasicComponents.Containers.SmartReadOnlyCollection`1.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentCombinationInvalid">
            <summary>
              Looks up a localized string similar to The input combination of {0} is not valid..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentHasWrongDimension">
            <summary>
              Looks up a localized string similar to {0} has a wrong dimension..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentIsInfinity">
            <summary>
              Looks up a localized string similar to {0} is +/-\infinity and not valid..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentIsInvalid">
            <summary>
              Looks up a localized string similar to {0} is an invalid input..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentIsInvalidForObject">
            <summary>
              Looks up a localized string similar to {0} is no valid input for {1}..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentIsMinusInfinity">
            <summary>
              Looks up a localized string similar to {0} is -\infinity and not valid..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentIsNaN">
            <summary>
              Looks up a localized string similar to {0} is NaN (not a number) and not valid..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentIsNoSquaredMatrix">
            <summary>
              Looks up a localized string similar to {0} is not a squared matrix..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentIsNotWellDefined">
            <summary>
              Looks up a localized string similar to {0} contains non-valid data..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentIsPositiveInfinity">
            <summary>
              Looks up a localized string similar to {0} is +\infinity and not valid..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentNull">
            <summary>
              Looks up a localized string similar to {0} is null reference..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentOutOfConstraint">
            <summary>
              Looks up a localized string similar to The argument {0} is outside the valid range {1}. .
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentOutOfRange">
            <summary>
              Looks up a localized string similar to The argument {0} is outside the valid range..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentOutOfRangeGreater">
            <summary>
              Looks up a localized string similar to {0} must be greater than {1}..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentOutOfRangeGreaterEqual">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal {1}..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentOutOfRangeGreaterLessEqual">
            <summary>
              Looks up a localized string similar to The argument {0} must be greater than or equal {1} and less than or equal {2}..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentOutOfRangeLessEqual">
            <summary>
              Looks up a localized string similar to {0} must be less than or equal {1}..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ArgumentRangeLessEqual">
            <summary>
              Looks up a localized string similar to The range between {0} and {1} must be less than or equal {2}..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.NoDataGiven">
            <summary>
              Looks up a localized string similar to No data given..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ObjectIsInvalid">
            <summary>
              Looks up a localized string similar to {0} is invalid for the given operation ({1})..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ObjectIsNotOperable">
            <summary>
              Looks up a localized string similar to {0} is not operable..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ObjectIsNotOrdered">
            <summary>
              Looks up a localized string similar to {0} is not ordered how the calling object assumes..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.ObjectIsReadOnly">
            <summary>
              Looks up a localized string similar to {0} is read only..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.PropertyGroupNameUnknown">
            <summary>
              Looks up a localized string similar to The property group name {0} is unknown..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.PropertyNameUnknown">
            <summary>
              Looks up a localized string similar to The property name {0} is unknown..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.ExceptionMessages.TableNameUnknown">
            <summary>
              Looks up a localized string similar to The table name {0} is unknown..
            </summary>
        </member>
        <member name="T:Dodoni.BasicComponents.IAnnotatable">
            <summary>Serves as interface for classes which contains an additional description.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.IAnnotatable.HasReadOnlyAnnotation">
            <summary>Gets a value indicating whether the annotation is read-only.
            </summary>
            <value><c>true</c> if the annotation of this instance is readonly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dodoni.BasicComponents.IAnnotatable.Annotation">
            <summary>Gets the annotation of the current instance.
            </summary>
            <value>The annotation of the current instance.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.IAnnotatable.TrySetAnnotation(System.String)">
            <summary>Sets the annotation of the current instance.
            </summary>
            <param name="annotation">The annotation.</param>
            <returns>A value indicating whether the <see cref="P:Dodoni.BasicComponents.IAnnotatable.Annotation"/> has been changed.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.IdentifierString">
            <summary>Represents a <see cref="T:System.String"/> object and a 'normalized' representation; each character which comes next to 
            <see cref="F:Dodoni.BasicComponents.IdentifierString.IgnoringStartCharacter"/> will be ignored.
            </summary>
        </member>
        <member name="T:Dodoni.BasicComponents.IdentifierString.Compararer">
            <summary>Represents a comparer where the identifier string is taken into account only.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.Compararer.Equals(Dodoni.BasicComponents.IdentifierString,Dodoni.BasicComponents.IdentifierString)">
            <summary>Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Dodoni.BasicComponents.IdentifierString"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Dodoni.BasicComponents.IdentifierString"/> to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.Compararer.GetHashCode(Dodoni.BasicComponents.IdentifierString)">
            <summary>Returns a hash code for a specific <see cref="T:Dodoni.BasicComponents.IdentifierString"/> object.
            </summary>
            <param name="obj">The <see cref="T:Dodoni.BasicComponents.IdentifierString"/> object.</param>
            <returns>A hash code for <paramref name="obj"/>, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="F:Dodoni.BasicComponents.IdentifierString.EqualityComparer">
            <summary>A comparer implementation where the identifier string is taken into account only.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.IdentifierString.Empty">
            <summary>Represents the empty <see cref="T:Dodoni.BasicComponents.IdentifierString"/>. This field is read-only.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.IdentifierString.IgnoringStartCharacter">
            <summary>The character which represents the start token for some comment, i.e. each character which comes next to this
            character will be ignored.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.IdentifierString.String">
            <summary>The (raw) <see cref="T:System.String"/> representation.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.IdentifierString.IDString">
            <summary>The <see cref="F:Dodoni.BasicComponents.IdentifierString.String"/> object in its 'normalized' <see cref="T:System.String"/> representation.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.IdentifierString"/> class.
            </summary>
            <param name="rawString">The (raw) string.</param>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="rawString"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.CompareTo(Dodoni.BasicComponents.IdentifierString)">
            <summary>Compares this instance to a specified <see cref="T:Dodoni.BasicComponents.IdentifierString"/> object and returns an indication of their relative values.
            </summary>
            <param name="other">A <see cref="T:Dodoni.BasicComponents.IdentifierString"/> object to compare to this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has this meanings:
            <para>Less than zero: This instance is less than <paramref name="other"/>.</para>
            <para>Zero: This instance is equal to <paramref name="other"/>.</para>
            <para>Greater than zero: This instance is greater than <paramref name="other"/>.</para>
            </returns>
            <remarks>The <see cref="F:Dodoni.BasicComponents.IdentifierString.IDString"/> is used for the compare operation.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.CompareTo(System.String)">
            <summary>Compares this instance to a specified <see cref="F:Dodoni.BasicComponents.IdentifierString.String"/> object and returns an indication of their relative values.
            </summary>
            <param name="other">A <see cref="F:Dodoni.BasicComponents.IdentifierString.String"/> object to compare to this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has this meanings:
            <para>Less than zero: This instance is less than <paramref name="other"/>.</para>
            <para>Zero: This instance is equal to <paramref name="other"/>.</para>
            <para>Greater than zero: This instance is greater than <paramref name="other"/>.</para>
            </returns>
            <remarks>The <see cref="F:Dodoni.BasicComponents.IdentifierString.IDString"/> is used for the compare operation.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.Equals(Dodoni.BasicComponents.IdentifierString)">
            <summary>Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.Equals(System.String)">
            <summary>Indicates whether the current object is equal to another <see cref="T:System.String"/> object.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
            <remarks>The <see cref="F:Dodoni.BasicComponents.IdentifierString.IDString"/> is used for the compare operation.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <remarks>The <see cref="F:Dodoni.BasicComponents.IdentifierString.IDString"/> is used for the compare operation.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.GetHashCode">
            <summary>Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <remarks>The <see cref="F:Dodoni.BasicComponents.IdentifierString.IDString"/> is used for the compare operation.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.Create(System.String)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.IdentifierString"/>.
            </summary>
            <param name="rawString">The (raw) string.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.IdentifierString"/> object that represents <paramref name="rawString"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="rawString"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.Create(System.Resources.ResourceManager,System.String)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.IdentifierString"/>.
            </summary>
            <param name="resourceManager">The resource manager with respect to the resource which contains the <see cref="T:System.String"/> representations.</param>
            <param name="resourcePropertyName">The property name with respect to a given <paramref name="resourceManager"/> which contains some language dependend <see cref="T:System.String"/> representation.</param>
            <exception cref="T:System.ArgumentException">Thrown if no resource file is found or the property name is not valid for the given resource file.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="resourceManager"/> is <c>null</c>.</exception>
            <remarks>Use this method if a <see cref="T:Dodoni.BasicComponents.IdentifierString"/> should be language depended, i.e. if a resource file is available.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.Create(System.String,System.String,System.Reflection.Assembly)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.IdentifierString"/>.
            </summary>
            <param name="fullResourceName">The resource name (no language dependend suffix) and the corresponding namespace.</param>
            <param name="resourcePropertyName">The property name with respect to a given resource which contains some language dependend <see cref="T:System.String"/> representation.</param>
            <param name="assembly">The assembly to take into account.</param>
            <exception cref="T:System.ArgumentException">Thrown if no resource file is found or the property name is not valid for the given resource file.</exception>
            <remarks>Use this method if a <see cref="T:Dodoni.BasicComponents.IdentifierString"/> should be language depended, i.e. if a resource file is available.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.op_Explicit(Dodoni.BasicComponents.IdentifierString)~System.String">
            <summary>Performs an explicit conversion from <see cref="T:Dodoni.BasicComponents.IdentifierString"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="identifierString">The identifier string.</param>
            <returns>The result of the conversion, i.e. the 'raw' <see cref="T:System.String"/> representation.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierString.GetIDString(System.String,System.Boolean)">
            <summary>Gets the ID string, i.e. a 'normalized' <see cref="F:Dodoni.BasicComponents.IdentifierString.String"/> representation.
            </summary>
            <param name="rawString">The (raw) string.</param>
            <param name="ignorCommentCharacter">A value indicating whether all character which comes next to <see cref="F:Dodoni.BasicComponents.IdentifierString.IgnoringStartCharacter"/> will be ignored.</param>
            <returns>A 'normalized' representation of <paramref name="rawString"/>, especially without white spaces.
            </returns>
        </member>
        <member name="T:Dodoni.BasicComponents.IdentifierStringExtensions">
            <summary>Represents extensions for <see cref="T:Dodoni.BasicComponents.IdentifierString"/> as well as for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierStringExtensions.ToIdentifierString(System.String)">
            <summary>Gets the <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.
            </summary>
            <param name="value">The (raw) string.</param>
            <returns>The <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierStringExtensions.ToIDString(System.String)">
            <summary>Gets the <see cref="F:Dodoni.BasicComponents.IdentifierString.IDString"/> component of the <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.
            </summary>
            <param name="value">The (raw) string.</param>
            <returns>The <see cref="F:Dodoni.BasicComponents.IdentifierString.IDString"/> component of the <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierStringExtensions.GetRelevantSubstring(System.String)">
            <summary>Gets the relevant substring, i.e. returns a copy of the argument, where each character followed by <see cref="F:Dodoni.BasicComponents.IdentifierString.IgnoringStartCharacter"/> will be suppress.
            </summary>
            <param name="value">The string.</param>
            <returns>A copy of <paramref name="value"/> where each character followed by <see cref="F:Dodoni.BasicComponents.IdentifierString.IgnoringStartCharacter"/> will be removed.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierStringExtensions.ToTimeStampString(System.String)">
            <summary>Gets a <see cref="T:System.String"/> representation that contains an additional time stamp, where <see cref="F:Dodoni.BasicComponents.IdentifierString.IgnoringStartCharacter"/> 
            is used as splitting character.
            </summary>
            <param name="value">The value.</param>
            <returns><paramref name="value"/> plus <see cref="F:Dodoni.BasicComponents.IdentifierString.IgnoringStartCharacter"/> plus the current time.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.IdentifierStringExtensions.ToTimeStampString(System.String,System.DateTime)">
            <summary>Gets a <see cref="T:System.String"/> representation that contains an additional time stamp, where <see cref="F:Dodoni.BasicComponents.IdentifierString.IgnoringStartCharacter"/> 
            is used as splitting character.
            </summary>
            <param name="value">The value.</param>
            <param name="dateTime">The <see cref="T:System.DateTime"/> object.</param>
            <returns><paramref name="value"/> plus <see cref="F:Dodoni.BasicComponents.IdentifierString.IgnoringStartCharacter"/> plus <paramref name="dateTime"/>.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.IIdentifierNameable">
            <summary>Serves as interface for classes that provides a name in its <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.IIdentifierNameable.Name">
            <summary>Gets the name of the current instance.
            </summary>
            <value>The language independent name of the current instance.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.IIdentifierNameable.LongName">
            <summary>Gets the long name of the current instance.
            </summary>
            <value>The (perhaps) language dependent long name of the current instance.</value>
        </member>
        <member name="T:Dodoni.BasicComponents.IOperable">
            <summary>Serves as interface to indicate whether an object is currently operable.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.IOperable.IsOperable">
            <summary>Gets a value indicating whether this instance is operable.
            </summary>
            <value><c>true</c> if this instance is operable; otherwise, <c>false</c>.
            </value>
            <remarks>
            <c>false</c> will be returned if the current instance represents some data, model, interpolation procedure,
            integration approach, optimization procedure etc. and no valid parameters are available.
            </remarks>
        </member>
        <member name="T:Dodoni.BasicComponents.Logging.Configuration.LoggingConfigurationFileSection">
            <summary>Represents a section concerning the configuration for logging within a configuration file.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.Configuration.LoggingConfigurationFileSection.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Logging.Configuration.LoggingConfigurationFileSection" /> class.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.Configuration.LoggingConfigurationFileSection.TypeName">
            <summary>Gets or sets the name of the type that represents the <see cref="T:Dodoni.BasicComponents.Logging.IloggerStreamFactory"/> class to take into account for logging.
            </summary>
            <value>The name of the type that represents the <see cref="T:Dodoni.BasicComponents.Logging.IloggerStreamFactory"/> class to take into account for logging.</value>
        </member>
        <member name="T:Dodoni.BasicComponents.Logging.Configuration.LoggingConfigurationManager">
            <summary>Serves as factory for a specific <see cref="T:Microsoft.Extensions.Logging.ILogger"/> object with respect to Managed Extensibility Framework (MEF) and the configuration file.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.Configuration.LoggingConfigurationManager.Value">
            <summary>Gets the logger in its <see cref="T:Dodoni.BasicComponents.Logging.IloggerStreamFactory"/> representation.
            </summary>
            <value>The logger in its <see cref="T:Dodoni.BasicComponents.Logging.IloggerStreamFactory"/> representation.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.Configuration.LoggingConfigurationManager.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Logging.Configuration.LoggingConfigurationManager" /> class.
            </summary>
        </member>
        <member name="T:Dodoni.BasicComponents.Logging.ILoggedObject">
            <summary>Serves as interface for classes which supports some logging functionality.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.ILoggedObject.Logging">
            <summary>Gets the logger of the current instance in its <see cref="T:Microsoft.Extensions.Logging.ILogger"/> representation.
            </summary>
            <value>The logger of the current instance in its <see cref="T:Microsoft.Extensions.Logging.ILogger"/> representation.</value>
        </member>
        <member name="T:Dodoni.BasicComponents.Logging.IloggerStreamFactory">
            <summary>Represents a type used to configure the logging system and create instances of type <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.IloggerStreamFactory.CreateLogger(System.String,System.Type,System.String,System.String)">
            <summary>Creates a new <see cref="T:Microsoft.Extensions.Logging.ILogger"/> object.
            </summary>
            <param name="senderObjectTypeName">The object type name of the source object that adds the message.</param>
            <param name="senderObjectType">The type of the source object that adds the message.</param>
            <param name="senderObjectName">The name of the source object that adds the message.</param>
            <param name="channel">A specific channel, i.e. a name or category, for example <c>YieldCurveConstruction</c> etc.</param>
            <returns>A new <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Logging.Logger">
            <summary>Provides static methods for logging of specific objects.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Logging.Logger.Stream">
            <summary>The logging object ('global logging') and factory for new logging objects.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.Logger.#cctor">
            <summary>Initializes the <see cref="T:Dodoni.BasicComponents.Logging.Logger"/> class.
            </summary>
        </member>
        <member name="T:Dodoni.BasicComponents.Logging.LoggingResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.AnnotationErrorMessageType">
            <summary>
              Looks up a localized string similar to A generic Error message..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.AnnotationFatalErrorMessageType">
            <summary>
              Looks up a localized string similar to A generic Fatal Error message..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.AnnotationInfoMessageType">
            <summary>
              Looks up a localized string similar to A generic Info message..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.AnnotationPoolItemAddedInfoMessageType">
            <summary>
              Looks up a localized string similar to A specific Item has been added to a specified pool of objects..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.AnnotationPoolItemReplacedInfoMessageType">
            <summary>
              Looks up a localized string similar to A specific Item in a specified pool of objects has been replaced..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.AnnotationWarningMessageType">
            <summary>
              Looks up a localized string similar to A generic Warning message..
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.LongNameErrorMessageType">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.LongNameFatalErrorMessageType">
            <summary>
              Looks up a localized string similar to Fatal error.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.LongNameInfoMessageType">
            <summary>
              Looks up a localized string similar to Info.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.LongNamePoolItemAddedInfoMessageType">
            <summary>
              Looks up a localized string similar to Pool Item added.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.LongNamePoolItemReplacedInfoMessageType">
            <summary>
              Looks up a localized string similar to Pool Item replaced.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.LongNameWarningMessageType">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Logging.LoggingResources.Unknow">
            <summary>
              Looks up a localized string similar to Unknow.
            </summary>
        </member>
        <member name="T:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory">
            <summary>A simple logger if a configuration file is missing or corrupt.
            </summary>
        </member>
        <member name="T:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.LoggerStream">
            <summary>A logger with respect to a specific object.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.LoggerStream.#ctor(System.String,System.Type,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.LoggerStream" /> class.
            </summary>
            <param name="senderObjectTypeName">Name of the sender object type.</param>
            <param name="senderObjectType">Type of the sender object.</param>
            <param name="senderObjectName">Name of the sender object.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.LoggerStream.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.LoggerStream.BeginScope``1(``0)">
            <summary>Begins a logical operation scope.
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="state">The identifier for the scope.</param>
            <returns>An IDisposable that ends the logical operation scope on dispose.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.LoggerStream.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>Checks if the given <paramref name="logLevel" /> is enabled.
            </summary>
            <param name="logLevel">level to be checked.</param>
            <returns><c>true</c> if enabled.</returns>            
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.LoggerStream.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>Writes a log entry.
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">Id of the event.</param>
            <param name="state">The entry to be written. Can be also an object.</param>
            <param name="exception">The exception related to this entry.</param>
            <param name="formatter">Function to create a <c>string</c> message of the <paramref name="state" /> and <paramref name="exception" />.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory"/> class.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)">
            <summary>Adds an <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> to the logging system.
            </summary>
            <param name="provider">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.CreateLogger(System.String,System.Type,System.String,System.String)">
            <summary>Creates a new <see cref="T:Microsoft.Extensions.Logging.ILogger" /> object.
            </summary>
            <param name="senderObjectTypeName">The object type name of the source object that adds the message.</param>
            <param name="senderObjectType">The type of the source object that adds the message.</param>
            <param name="senderObjectName">The name of the source object that adds the message.</param>
            <param name="channel">A specific channel, i.e. a name or category, for example <c>YieldCurveConstruction</c> etc.</param>
            <returns>A new <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.CreateLogger(System.String)">
            <summary>Creates a new <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance.
            </summary>
            <param name="categoryName">The category name for messages produced by the logger.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Logging.ILogger" />.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>Writes a log entry.
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">Id of the event.</param>
            <param name="state">The entry to be written. Can be also an object.</param>
            <param name="exception">The exception related to this entry.</param>
            <param name="formatter">Function to create a <c>string</c> message of the <paramref name="state" /> and <paramref name="exception" />.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>Checks if the given <paramref name="logLevel" /> is enabled.
            </summary>
            <param name="logLevel">level to be checked.</param>
            <returns><c>true</c> if enabled.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Logging.StandardLoggerStreamFactory.BeginScope``1(``0)">
            <summary>Begins a logical operation scope.
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="state">The identifier for the scope.</param>
            <returns>An IDisposable that ends the logical operation scope on dispose.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Dodoni.BasicComponents.NotOperableException">
            <summary>Represents the exception which occurs if an object is not operable (see also <seealso cref="T:Dodoni.BasicComponents.IOperable"/>) but one tries to use it.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.NotOperableException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.NotOperableException"/> class.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.NotOperableException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.NotOperableException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.NotOperableException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.NotOperableException"/> class.
            </summary>
            <param name="message">The message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.NotOperableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.NotOperableException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.DescriptionAttribute">
            <summary>Represents an attribute class that contains a specific <see cref="T:System.String"/> object which
            represents a (language independent) description of enum member etc.
            </summary>
            <example>
            <code>
              public enum Example {
               [String("Number 1")]   // or use LanguageStringAttribute
               [Description("This is a sample...")]
                No_1,
                
                // ...
              }
              ...
              Example example = Example.No_1;
              string name = example.ToFormatString();
              string description = example.GetDescription();
            </code></example>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.DescriptionAttribute.Description">
            <summary>The <see cref="T:System.String"/> representation of the description.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DescriptionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.DescriptionAttribute"/> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DescriptionAttribute.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.LanguageDescriptionAttribute">
            <summary>Represents an attribute class that contains a language depending description, more precisely it contains 
            the property name of a resource file which contains a specific language depending <see cref="T:System.String"/> representation.
            </summary>
            <example>
            <code>
              [LanguageResource("YourNamespace.ResourceFileName")]
              public enum Example {
               [String("Number 1")]   // or use LanguageStringAttribute
               [LanguageDescriptionAttribute("Example_1", "Test")]
                No_1,
                
                // ...
              }
              // Moreover a resource file is given with respect to the 'LanguageResource' attribute
              // which contains some element with name 'Example_1' (no code generation is necessary),
              // for example: "Example_1": "This is my {0}."
              ...
              Example example = Example.No_1;
              string name = example.ToFormatString();
              string description = example.GetDescription();  // = "This is my Test."
            </code></example>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.LanguageDescriptionAttribute.ResourcePropertyName">
            <summary>The property name with respect to a given resource which contains some language dependend <see cref="T:System.String"/> representation.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.LanguageDescriptionAttribute.m_Arg0">
            <summary>The first argument used in the <see cref="M:System.String.Format(System.String,System.Object)"/> method needed to generate the <see cref="T:System.String"/> representation.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.LanguageDescriptionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.LanguageDescriptionAttribute"/> class.
            </summary>
            <param name="resourcePropertyName">The property name of the language dependend <see cref="T:System.String"/> representation with respect 
            to a resource file which is represented by an instance of <see cref="T:Dodoni.BasicComponents.Utilities.LanguageResourceAttribute"/>. The resource string represents some composite format string.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.LanguageDescriptionAttribute.Arg0">
            <summary>Gets or sets the first argument used in the <see cref="M:System.String.Format(System.String,System.Object)"/> method 
            needed to generate the <see cref="T:System.String"/> representation of the current instance.
            </summary>
            <value>The first argument needed for the <see cref="T:System.String"/> representation.</value>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.LanguageResourceAttribute">
            <summary>Represents an attribute class that contains the name of the resource (files) which contains language dependend 
            <see cref="T:System.String"/> representations of the elements of the underlying enumeration.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.LanguageResourceAttribute.FullResourceName">
            <summary>The resource name (no language dependend suffix) and the corresponding namespace.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.LanguageResourceAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.LanguageResourceAttribute"/> class.
            </summary>
            <param name="fullResourceName">The name of the resource (including the namespace).</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.LanguageStringAttribute">
            <summary>Represents an attribute class which contains the property name of some resource 
            which contains some language depending <see cref="T:System.String"/> representation.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.LanguageStringAttribute.ResourcePropertyName">
            <summary>The property name with respect to a specific resource file that contains a language depending <see cref="T:System.String"/> representation.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.LanguageStringAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.LanguageStringAttribute"/> class.
            </summary>
            <param name="resourcePropertyName">The property name of the language depending <see cref="T:System.String"/> representation with respect 
            to a resource file that is represented by an instance of <see cref="T:Dodoni.BasicComponents.Utilities.LanguageResourceAttribute"/>.</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.StringAttribute">
            <summary>Represents an attribute class which contains a <see cref="T:System.String"/> object.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.StringAttribute.StringRepresentation">
            <summary>The <see cref="T:System.String"/> representation.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.StringAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.StringAttribute"/> class.
            </summary>
            <param name="stringRepresentation">The <see cref="T:System.String"/> representation.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.StringAttribute.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.ConfigurationFile">
            <summary>Represents a configuration file, i.e. a collection of names and values.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.Dodoni">
            <summary>The configuration of the Dodoni.net framework.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.m_FilePath">
            <summary>The file path of the configuration file used to store the user settings.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.m_XmlFileRepresenation">
            <summary>The configuration file in its <see cref="T:System.Xml.XmlDocument"/> representation.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.m_XmlRootNodeName">
            <summary>The name of the main node in the xml representation of the configuration file.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile"/> class, the path of the assembly will be used as well as the assembly file name. 
            </summary>
            <param name="configurationFileName">The name of the configuration file.</param>
            <param name="configurationFilePath">The path with respect to <paramref name="configurationFileName"/>.</param>
            <param name="xmlRootNodeName">The name of the root node in the XML file representation of the configuration file.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile"/> class, the path of the assembly will be used as well as the assembly file name. 
            </summary>
            <param name="configurationFileName">The name of the configuration file (with respect to the base directory of the <see cref="T:System.AppDomain"/>).</param>
            <param name="xmlRootNodeName">The name of the root node in the XML file representation of the configuration file.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.FilePath">
            <summary>Gets the physical path to the configuration file represented by this <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile"/> file path.
            </summary>
            <value>The file path of the configuration.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.GetPropertyCollection(System.String)">
            <summary>Gets a specified property collection, i.e. a collection of settings grouped by a specified name.
            </summary>
            <param name="propertyCollectionName">The name of the property collection.</param>
            <returns>A perhaps empty collection of properties (i.e. settings) in the configuration file in its <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection"/> representation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="propertyCollectionName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.GetPropertyCollection``1(System.String,System.Func{Dodoni.BasicComponents.Utilities.ConfigurationFile,System.String,``0})">
            <summary>Gets a specified property collection, i.e. a collection of settings grouped by a specified name.
            </summary>
            <typeparam name="T">The type of the property collection.</typeparam>
            <param name="propertyCollectionName">The name of the property collection.</param>
            <param name="propertyCollectionFactory">A factory for <typeparamref name="T"/> objects, where the first argument is the current instance and the second argument is the <paramref name="propertyCollectionName"/>.</param>
            <returns>A perhaps empty collection of properties (i.e. settings) in the configuration file in its <typeparamref name="T"/> representation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="propertyCollectionName"/> is <c>null</c>.</exception>
            <remarks>The argument <paramref name="propertyCollectionFactory"/> is a workaround because C# does not allow to restrict a generic type to a class that contains a specified constructor, only <code>where T: PropertyCollection, new()</code> is possible.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.GetTable(System.String,System.String,System.String[])">
            <summary>Gets a specified data table, i. e. a collection of homogeneous data grouped by a specified name.
            </summary>
            <param name="tableName">The name of the table, i.e. of the section in the XML representation of the configuration file.</param>
            <param name="tableEntryName">The name of each data table entry.</param>
            <param name="fieldNames">The name of each field of the data table entries.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table"/> object that contains homogeneous data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.GetTable``1(System.String,System.Func{Dodoni.BasicComponents.Utilities.ConfigurationFile,System.String,``0})">
            <summary>Gets a specified data table, i.e. a collection of homogenious data grouped by a specified name.
            </summary>
            <typeparam name="T">The type of the table.</typeparam>
            <param name="tableName">The name of the table, i.e. of the section in the XML representation of the configuration file.</param>
            <param name="tableFactory">A factory for <typeparamref name="T"/> objects, where the first argument is the current instance and the second argument is the <paramref name="tableName"/>.</param>
            <returns>A typed <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table"/> object as object of type <typeparamref name="T"/> that contains homogeneous data.</returns>
            <remarks>The argument <paramref name="tableFactory"/> is a workaround because in C# does not allow to restrict a generic type to a class that contains a specified constructor, only <code>where T: Table, new()</code> is possible.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.GetSectionNode(System.String,System.Boolean@)">
            <summary>Gets a specified section node in the Xml representation of the configuration file in its <see cref="T:System.Xml.XmlNode"/> representation.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="sectionExists">A value indicating whether a section of the specified name already exists in the internal <see cref="T:System.Xml.XmlDocument"/> representation.</param>
            <returns>A <see cref="T:System.Xml.XmlNode"/> object that represents the root node of a specified section in the Xml file representation of the configuration file. If no section with
            the specified <paramref name="sectionName"/> exists an empty node will be inserted into the internal <see cref="T:System.Xml.XmlDocument"/> representation and returned.</returns>
            <exception cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFileErrorException">Thrown if the configuration file exists and is in an invalid format.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.GetSectionNode(System.String)">
            <summary>Gets a specified section node in the Xml representation of the configuration file in its <see cref="T:System.Xml.XmlNode"/> representation.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <returns>A <see cref="T:System.Xml.XmlNode"/> object that represents the root node of a specified section in the Xml file representation of the configuration file. If no section with
            the specified <paramref name="sectionName"/> exists an empty node will be inserted into the internal <see cref="T:System.Xml.XmlDocument"/> representation and returned.</returns>
            <exception cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFileErrorException">Thrown if the configuration file exists and is in an invalid format.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Save">
            <summary>Writes the configuration settings into the configuration file.
            </summary>
            <exception cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFileErrorException">Thrown if some error occured while saving the settings.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Create(System.String,System.String)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile"/> object.
            </summary>
            <param name="configurationFileName">The name of the configuration file (the path will be ignored).</param>
            <param name="xmlRootNodeName">The name of the root node in the XML file representation of the configuration file.</param>
            <returns>A new <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile"/> object.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Create(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile"/> object.
            </summary>
            <param name="configurationFileName">The name of the configuration file.</param>
            <param name="xmlRootNodeName">The name of the root node in the XML file representation of the configuration file.</param>
            <param name="configurationFilePath">The path with respect to <paramref name="configurationFileName"/>.</param>
            <returns>A new <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile"/> object.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection">
            <summary>Represents a collection of properties in a configuration file, i.e. a specified section in the xml file representation of the configuration file.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.m_ConfigurationFile">
            <summary>The configuration file in its <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile"/> representation.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.m_PropertyCollectionName">
            <summary>The name of the collection of properties configuration file.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.m_PropertyCollectionParentNode">
            <summary>The parent node of the section in the xml file that contains the collection of properties.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.m_ContainsSettings">
            <summary>A value indicating whether the configuration file already contains settings with respect to the current <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection"/> object.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.#ctor(Dodoni.BasicComponents.Utilities.ConfigurationFile,Dodoni.BasicComponents.IdentifierString)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection" /> class.
            </summary>
            <param name="configurationFile">The configuration file.</param>
            <param name="propertyCollectionName">The name of the property collection.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.#ctor(Dodoni.BasicComponents.Utilities.ConfigurationFile,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection" /> class.
            </summary>
            <param name="configurationFile">The configuration file.</param>
            <param name="propertyCollectionName">The name of the property collection.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.Name">
            <summary>Gets the name of the current instance.
            </summary>
            <value>The language independent name of the current instance.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.LongName">
            <summary>Gets the long name of the current instance.
            </summary>
            <value>The (perhaps) language dependent long name of the current instance.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.InfoOutputDetailLevel">
            <summary>Gets the info-output level of detail.
            </summary>
            <value>The info-output level of detail.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.ContainsSettings">
            <summary>Gets a value indicating whether the configuration file already contains settings with respect to the current <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile"/> object; will be set to <c>true</c>
            after calling <see cref="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Save"/>.
            </summary>
            <value><c>true</c> if the configuration file already contains some settings; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.TrySetInfoOutputDetailLevel(Dodoni.BasicComponents.Containers.InfoOutputDetailLevel)">
            <summary>Sets the <see cref="P:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.InfoOutputDetailLevel" /> property.
            </summary>
            <param name="infoOutputDetailLevel">The info-output level of detail.</param>
            <returns>A value indicating whether the <see cref="P:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.InfoOutputDetailLevel" /> has been set to <paramref name="infoOutputDetailLevel" />.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.FillInfoOutput(Dodoni.BasicComponents.Containers.InfoOutput,System.String)">
            <summary>Gets informations of the current object as a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput" /> instance.
            </summary>
            <param name="infoOutput">The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput" /> object which is to be filled with informations concering the current instance.</param>
            <param name="categoryName">The name of the category, i.e. all informations will be added to these category.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.SetValue(System.String,System.String)">
            <summary>Sets a specific entry in the configuration file.
            </summary>
            <param name="key">The key, i.e. the key in the XML file.</param>
            <param name="value">The value in its <see cref="T:System.String"/> representation.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.SetValue(System.String,System.Boolean)">
            <summary>Sets a specific entry in the configuration file.
            </summary>
            <param name="key">The key, i.e. the key in the XML file.</param>
            <param name="value">The value in its <see cref="T:System.Boolean"/> representation.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.SetValue(System.String,System.Enum)">
            <summary>Sets a specific entry in the configuration file.
            </summary>
            <param name="key">The key, i.e. the key in the XML file.</param>
            <param name="value">The value in its <see cref="T:System.Enum"/> representation.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.SetValue(System.String,System.Double)">
            <summary>Sets a specific entry in the configuration file.
            </summary>
            <param name="key">The key, i.e. the key in the XML file.</param>
            <param name="value">The value in its <see cref="T:System.Enum"/> representation.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.SetValue(System.String,System.Int32)">
            <summary>Sets a specific entry in the configuration file.
            </summary>
            <param name="key">The key, i.e. the key in the XML file.</param>
            <param name="value">The value in its <see cref="T:System.Enum"/> representation.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.TryGetValue(System.String,System.String@)">
            <summary>Gets a specific entry in the configuration file.
            </summary>
            <param name="key">The key, i.e. the key in the xml file.</param>
            <param name="value">The value in its <see cref="T:System.String"/> representation (output).</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.TryGetValue(System.String,System.String@,System.String)">
            <summary>Gets a specific entry in the configuration file.
            </summary>
            <param name="key">The key, i.e. the key in the xml file.</param>
            <param name="value">The value in its <see cref="T:System.String"/> representation (output).</param>
            <param name="defaultValue">The default value to take into account if the configuration file does not contain an entry for <paramref name="key"/>.</param>
            <returns>A value indicating whether <paramref name="value"/> contains some data from the configuration file.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.TryGetValue(System.String,System.Boolean@,System.Boolean)">
            <summary>Gets a specific entry in the configuration file.
            </summary>
            <param name="key">The key, i.e. the key in the xml file.</param>
            <param name="value">The value in its <see cref="T:System.Boolean"/> representation (output).</param>
            <param name="defaultValue">The default value to take into account if the configuration file does not contain an entry for <paramref name="key"/>.</param>
            <returns>A value indicating whether <paramref name="value"/> contains some data from the configuration file.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.TryGetValue(System.String,System.Double@,System.Double)">
            <summary>Gets a specific entry in the configuration file.
            </summary>
            <param name="key">The key, i.e. the key in the xml file.</param>
            <param name="value">The value in its <see cref="T:System.Double"/> representation (output).</param>
            <param name="defaultValue">The default value to take into account if the configuration file does not contain an entry for <paramref name="key"/>.</param>
            <returns>A value indicating whether <paramref name="value"/> contains some data from the configuration file.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.TryGetValue(System.String,System.Int32@)">
            <summary>Gets a specific entry in the configuration file.
            </summary>
            <param name="key">The key, i.e. the key in the xml file.</param>
            <param name="value">The value in its <see cref="T:System.Int32"/> representation (output).</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.TryGetValue(System.String,System.Int32@,System.Int32)">
            <summary>Gets a specific entry in the configuration file.
            </summary>
            <param name="key">The key, i.e. the key in the xml file.</param>
            <param name="value">The value in its <see cref="T:System.Int32"/> representation (output).</param>
            <param name="defaultValue">The default value to take into account if the configuration file does not contain an entry for <paramref name="key"/>.</param>
            <returns>A value indicating whether <paramref name="value"/> contains some data from the configuration file.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.PropertyCollection.TryGetEnumValue``1(System.String,``0@)">
            <summary>Gets a specific entry in the configuration file.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="key">The key, i.e. the key in the xml file.</param>
            <param name="value">The value in its <typeparamref name="TEnum"/> representation (output).</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table">
            <summary>Represents a collection of homogenious entries in a configuration file.
            </summary>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection">
            <summary>The collection of each data entry in the table.
            </summary>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Enumerator">
            <summary>The Enumerator implementation of the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection"/> class.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Enumerator.#ctor(Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Enumerator" /> class.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Enumerator.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Enumerator.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary> Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Enumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Enumerator.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.m_Table">
            <summary>The reference to the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table"/> object.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.m_TableEntryName">
            <summary>The name of the entries in the data table, for example 'Plain Vanilla option'.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.m_TableParentNode">
            <summary>The parent node of the section in the XML file that represents the data.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.#ctor(Dodoni.BasicComponents.Utilities.ConfigurationFile.Table,System.Xml.XmlNode,Dodoni.BasicComponents.IdentifierString)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection" /> class.
            </summary>
            <param name="table">The reference to the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table"/> object.</param>
            <param name="tableParentNode">The parent node of the section in the XML file that represents the data.</param>
            <param name="tableEntryName">The name of each data table entry.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Count">
            <summary>Gets the number of entries.
            </summary>
            <value>The number of entries.
            </value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Item(System.Int32)">
            <summary>Gets the data at a specified null-based index.
            </summary>
            <param name="index">The null-based index.</param>
            <returns>For each field the value in its <see cref="T:System.String"/> representation.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Append(System.String[])">
            <summary>Append a new data entry into the configuration file.
            </summary>
            <param name="values">The values.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the length of <paramref name="values"/> is different from the number of fields.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.Clear">
            <summary>Removes all data.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.RemoveAt(System.Int32)">
            <summary>Removes an item at the specified null-based index.
            </summary>
            <param name="index">The null-based index of the item to remove.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.DataCollection.ChangeAt(System.Int32,System.Int32,System.String)">
            <summary>Changes the value at a specified null-based index and with respect to a specified field.
            </summary>
            <param name="index">The null-based index of the data entry.</param>
            <param name="fieldIndex">The null-based index of the field.</param>
            <param name="value">The value to set in its <see cref="T:System.String"/> representation.</param>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.m_ConfigurationFile">
            <summary>The configuration file in its <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile"/> representation.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.m_TableName">
            <summary>The name of the data table in the configuration file.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.m_FieldNames">
            <summary>The name of the fields of each entry in the data table.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.m_Items">
            <summary>The data collection.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.m_ContainsSettings">
            <summary>A value indicating whether the configuration file already contains settings with respect to the current <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table"/> object.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.#ctor(Dodoni.BasicComponents.Utilities.ConfigurationFile,Dodoni.BasicComponents.IdentifierString,Dodoni.BasicComponents.IdentifierString,System.String[])">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table" /> class.
            </summary>
            <param name="configurationFile">The configuration file.</param>
            <param name="tableName">The name of the table, i.e. of the section in the XML representation of the configuration file.</param>
            <param name="tableEntryName">The name of each data table entry.</param>
            <param name="fieldNames">The name of each field of the data table entries.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.#ctor(Dodoni.BasicComponents.Utilities.ConfigurationFile,System.String,System.String,System.String[])">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table" /> class.
            </summary>
            <param name="configurationFile">The configuration file.</param>
            <param name="tableName">The name of the table, i.e. of the section in the XML representation of the configuration file.</param>
            <param name="tableEntryName">The name of each data table entry.</param>
            <param name="fieldNames">The name of each field of the data table entries.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.Name">
            <summary>Gets the name of the current instance.
            </summary>
            <value>The language independent name of the current instance.
            </value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.LongName">
            <summary>Gets the long name of the current instance.
            </summary>
            <value>The (perhaps) language dependent long name of the current instance.
            </value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.InfoOutputDetailLevel">
            <summary>Gets the info-output level of detail.
            </summary>
            <value>The info-output level of detail.
            </value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.FieldNames">
            <summary>Gets the name of the fields of each entry in the table.
            </summary>
            <value>The data field names.
            </value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.Items">
            <summary>Gets an object representing the collection of the items contained in this <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table"/> object.
            </summary>
            <value>The collection of data.
            </value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.ContainsSettings">
            <summary>Gets a value indicating whether the configuration file already contains settings with respect to the current <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFile"/> object; will be set to <c>true</c>
            after calling <see cref="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Save"/>.
            </summary>
            <value><c>true</c> if the configuration file already contains some settings; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.TrySetInfoOutputDetailLevel(Dodoni.BasicComponents.Containers.InfoOutputDetailLevel)">
            <summary>Sets the <see cref="P:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.InfoOutputDetailLevel" /> property.
            </summary>
            <param name="infoOutputDetailLevel">The info-output level of detail.</param>
            <returns>A value indicating whether the <see cref="P:Dodoni.BasicComponents.Containers.IInfoOutputQueriable.InfoOutputDetailLevel" /> has been set to <paramref name="infoOutputDetailLevel" />.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFile.Table.FillInfoOutput(Dodoni.BasicComponents.Containers.InfoOutput,System.String)">
            <summary>Gets informations of the current object as a specific <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput" /> instance.
            </summary>
            <param name="infoOutput">The <see cref="T:Dodoni.BasicComponents.Containers.InfoOutput" /> object which is to be filled with informations concering the current instance.</param>
            <param name="categoryName">The name of the category, i.e. all informations will be added to these category.</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.ConfigurationFileErrorException">
            <summary>The exception class for invalid configuration files.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFileErrorException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFileErrorException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.ConfigurationFileErrorException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.ConfigurationFileErrorException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is cause of the current exception
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage">
            <summary>The method how to compute the string representation of a specific enumeration item.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage.LanguageStringAttribute">
            <summary>Take into account the <see cref="F:Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage.LanguageStringAttribute"/> for the specific enumeration element, if available; 
            otherwise use the <see cref="F:Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage.StringAttribute"/> or use the <c>ToString()</c> method if such attribute is not given.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage.StringAttribute">
            <summary>Use the <see cref="F:Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage.StringAttribute"/> if available; otherwise use the <c>ToString()</c> method.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage.ToStringMethod">
            <summary>Use the <c>ToString()</c> method of the specific enumeration element.
            </summary>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.EnumAttribute">
            <summary>Serves as factory for attributes of enumerations.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumAttribute.Create``1(System.Type)">
            <summary>Gets the attribute of a specific enumeration type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute class.</typeparam>
            <param name="enumType">An enumeration type.</param>
            <returns>The first <typeparamref name="TAttribute"/> instance of the enumeration or <c>null</c> if no such attribute is available.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumAttribute.Create``1(System.Enum)">
            <summary>Gets the attribute of a specific <see cref="T:System.Enum"/> object.
            </summary>
            <typeparam name="TAttribute">The type of the attribute class.</typeparam>
            <param name="value">The value, i.e. the item of the enumeration.</param>
            <returns>The first <typeparamref name="TAttribute"/> instance of <paramref name="value"/> or <c>null</c> if no such attribute is available.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumAttribute.Create``1(System.IConvertible)">
            <summary>Gets the attribute of a specific enumeration item.
            </summary>
            <typeparam name="TAttribute">The type of the attribute class.</typeparam>
            <param name="value">The value, i.e. the item of the enumeration.</param>
            <returns>The first <typeparamref name="TAttribute"/> instance of <paramref name="value"/> or <c>null</c> if no such attribute is available.</returns>
            <remarks>Here, we use the <see cref="T:System.IConvertible"/> representation of a type-safe enumeration representation.</remarks>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.EnumExtensions">
            <summary>Represents extensions for <see cref="T:System.Enum"/> objects.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumExtensions.ToFormatString(System.Enum,Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage)">
            <summary>Gets a <see cref="T:System.String"/> representation that takes into account <see cref="T:Dodoni.BasicComponents.Utilities.LanguageResourceAttribute"/>,
            <see cref="T:Dodoni.BasicComponents.Utilities.LanguageStringAttribute"/> or <see cref="T:Dodoni.BasicComponents.Utilities.StringAttribute"/>; if available.
            </summary>
            <param name="value">The value.</param>
            <param name="enumStringRepresentationUsage">The method how to compute the <see cref="T:System.String"/> representation.</param>
            <returns>A <see cref="T:System.String"/> representation of <paramref name="value"/> with respect to <paramref name="enumStringRepresentationUsage"/>, i.e. 
            <see cref="T:Dodoni.BasicComponents.Utilities.LanguageResourceAttribute"/>, <see cref="T:Dodoni.BasicComponents.Utilities.LanguageStringAttribute"/>, <see cref="T:Dodoni.BasicComponents.Utilities.StringAttribute"/>
            or the <c>ToString()</c> method is used to generate the string representation.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumExtensions.GetDescription(System.Enum)">
            <summary>Gets a description of the argument taken into account <see cref="T:Dodoni.BasicComponents.Utilities.DescriptionAttribute"/> or <see cref="T:Dodoni.BasicComponents.Utilities.LanguageDescriptionAttribute"/>;
            if no description available <see cref="F:System.String.Empty"/> will be returned.</summary>
            <param name="value">The value.</param>
            <returns>The description of <paramref name="value"/>; <see cref="F:System.String.Empty"/> if no description available.</returns>
            <remarks>The <see cref="T:Dodoni.BasicComponents.Utilities.LanguageDescriptionAttribute"/> will be preferred if <see cref="T:Dodoni.BasicComponents.Utilities.DescriptionAttribute"/> is given as well.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumExtensions.HasNullValue(System.Enum)">
            <summary>Determines whether a specific <see cref="T:System.Enum"/> object represents the value '0'.
            </summary>
            <param name="value">The <see cref="T:System.Enum"/> object.</param>
            <returns><c>true</c> if the underlying value of <paramref name="value"/> is equal to <c>0</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.EnumExtensions.sm_OriginalFlagEnumSplitSeparator">
            <summary>Represents the separator character for enumeration values that are represented by a bitwise OR (Flags).
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumExtensions.GetEnumComponents(System.Enum)">
            <summary>Gets the values of a specific enumeration which produce a specific enumeration value, i.e. the union of the return values represents the <paramref name="enumValue"/>.
            </summary>
            <param name="enumValue">The enumeration value.</param>
            <returns>A enumeration of <see cref="T:System.Enum"/> objects that represents <paramref name="enumValue"/>, i.e. the union of the return values represents the <paramref name="enumValue"/>.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.EnumString`1">
            <summary>Represents an item of a specific enumeration and some <see cref="T:System.String"/> representation.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>    
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.EnumString`1.Value">
            <summary>The value.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.EnumString`1.StringRepresentation">
            <summary>The <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation of <see cref="F:Dodoni.BasicComponents.Utilities.EnumString`1.Value"/>.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.#ctor(`0,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> class.
            </summary>
            <param name="value">The element of a specific enumeration.</param>
            <param name="stringRepresentation">A <see cref="T:System.String"/> representation of the <paramref name="value"/>.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.#ctor(`0,Dodoni.BasicComponents.IdentifierString)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> class.
            </summary>
            <param name="value">The element of a specific enumeration.</param>
            <param name="stringRepresentation">A <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation of the <paramref name="value"/>.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.CompareTo(Dodoni.BasicComponents.Utilities.EnumString{`0})">
            <summary>Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Less than zero: This object is less than the <paramref name="other"/> parameter.
            Zero: This object is equal to <paramref name="other"/>.
            Greater than zero: This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.CompareTo(System.String)">
            <summary>Compares the current object with another object of type <see cref="T:System.String"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Less than zero: This object is less than the <paramref name="other"/> parameter.
            Zero: This object is equal to <paramref name="other"/>.
            Greater than zero: This object is greater than <paramref name="other"/>.
            </returns>
            <remarks>The <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation of <paramref name="other"/> is used for the comparisson,
            i.e. ignoring white spaces etc.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.CompareTo(Dodoni.BasicComponents.IdentifierString)">
            <summary>Compares the current object with another object of type <see cref="T:System.String"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Less than zero: This object is less than the <paramref name="other"/> parameter.
            Zero: This object is equal to <paramref name="other"/>.
            Greater than zero: This object is greater than <paramref name="other"/>.
            </returns>
            <remarks>The <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation of <paramref name="other"/> is used for the comparisson,
            i.e. ignoring white spaces etc.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.Equals(Dodoni.BasicComponents.IdentifierString)">
            <summary>Indicates whether the current object is equal to another object of type <see cref="T:Dodoni.BasicComponents.IdentifierString"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.Equals(System.String)">
            <summary>Indicates whether the current object is equal to another object of type <see cref="T:System.String"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.GetHashCode">
            <summary>Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.GetValues(Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage)">
            <summary>Retrieves a collection of the values of the constants in a specified enumeration in its <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> representation.
            </summary>
            <param name="enumStringRepresentationUsage">The method how to compute the string representation.</param>        
            <returns>A collection of <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> objects that contains the items of the enumeration </returns>
            <exception cref="T:System.ArgumentException">Thrown if <typeparamref name="TEnum"/> does not represents an enumeration.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.Parse(System.String,Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage)">
            <summary>Converts the string representation of an enumeration item to its enumeration item equivalent.</summary>
            <param name="stringRepresentation">The <see cref="T:System.String"/> representation to search for.</param>
            <param name="enumStringRepresentationUsage">The method how to compute the string representation of the items of the
            enumeration represented by <typeparamref name="TEnum"/>.</param>
            <returns>The element of the enumeration with respect to <paramref name="stringRepresentation"/>.</returns>
            <remarks>White spaces etc. will be ignored.</remarks>
            <exception cref="T:System.ArgumentException">Thrown, if <typeparamref name="TEnum"/> does not represent an enumeration.</exception>
            <exception cref="T:System.FormatException">Thrown, if there is no enumeration item with string representation <paramref name="stringRepresentation"/>.</exception>        
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.TryParse(System.String,`0@,Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage)">
            <summary>Converts the string representation of an enumeration item to its enumeration item equivalent.</summary>
            <param name="stringRepresentation">The <see cref="T:System.String"/> representation to search for.</param>
            <param name="value">The element of the enumeration with respect to <paramref name="stringRepresentation"/> (output).</param>
            <param name="enumStringRepresentationUsage">The method how to compute the string representation of the items of the
            enumeration represented by <typeparamref name="TEnum"/>.</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
            <remarks>White spaces etc. will be ignored.</remarks>
            <exception cref="T:System.ArgumentException">Thrown, if <typeparamref name="TEnum"/> does not represent an enumeration.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.op_Implicit(Dodoni.BasicComponents.Utilities.EnumString{`0})~`0">
            <summary>Performs an implicit conversion from <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> to <typeparamref name="TEnum"/>.
            </summary>
            <param name="enumString">The <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> object to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.op_Explicit(Dodoni.BasicComponents.Utilities.EnumString{`0})~Dodoni.BasicComponents.Utilities.EnumString">
            <summary>Performs an explicit conversion from <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> to <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/>.
            </summary>
            <param name="enumString">The <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> object to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.op_Explicit(Dodoni.BasicComponents.Utilities.EnumString{`0})~System.String">
            <summary>Performs an explicit conversion from <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="enumString">The <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> object to convert.</param>
            <returns>The result of the conversion, i.e. the raw string representation component of <paramref name="enumString"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.op_Explicit(Dodoni.BasicComponents.Utilities.EnumString{`0})~Dodoni.BasicComponents.IdentifierString">
            <summary>Performs an explicit conversion from <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> to <see cref="T:Dodoni.BasicComponents.IdentifierString"/>.
            </summary>
            <param name="enumString">The <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> object to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString`1.GetFormatString(`0,System.Resources.ResourceManager)">
            <summary>Gets the <see cref="T:System.String"/> representation of a specific enumeration item.
            </summary>
            <param name="value">The element of a specific enumeration.</param>
            <param name="resourceManager">The resource manager, perhaps <c>null</c> if no resource manager is available for <paramref name="value"/>.</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="value"/> taken into account the <paramref name="resourceManager"/>,
            i.e. <see cref="T:Dodoni.BasicComponents.Utilities.LanguageStringAttribute"/> if != <c>null</c>; otherwise <see cref="T:Dodoni.BasicComponents.Utilities.StringAttribute"/> is used if available; 
            otherwise the return value of the <c>ToString()</c> method of <paramref name="value"/> will be returned.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.EnumString">
            <summary>Represents an item of a specific enumeration and some <see cref="T:System.String"/> representation.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.EnumString.dotNetFlagsEnumSeparatorChar">
            <summary>The separator character of the .NET functions used for the string representation of a bit field; It seems not to be documented whether this is language dependend.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.EnumString.FlagsEnumSeparatorChar">
            <summary>Represents the separator character for the string representation of a bit field, i.e. if the enumeration contains the <see cref="T:System.FlagsAttribute"/>.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.EnumString.Value">
            <summary>The value.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.EnumString.StringRepresentation">
            <summary>The <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation of <see cref="F:Dodoni.BasicComponents.Utilities.EnumString.Value"/>.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.#ctor(System.Enum,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/> class.
            </summary>
            <param name="value">The element of a specific enumeration.</param>
            <param name="stringRepresentation">A <see cref="T:System.String"/> representation of the <paramref name="value"/>.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.#ctor(System.Enum,Dodoni.BasicComponents.IdentifierString)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/> class.
            </summary>
            <param name="value">The element of a specific enumeration.</param>
            <param name="stringRepresentation">A <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation of the <paramref name="value"/>.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.CompareTo(Dodoni.BasicComponents.Utilities.EnumString)">
            <summary>Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Less than zero: This object is less than the <paramref name="other"/> parameter.
            Zero: This object is equal to <paramref name="other"/>.
            Greater than zero: This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.CompareTo(System.String)">
            <summary>Compares the current object with another object of type <see cref="T:System.String"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Less than zero: This object is less than the <paramref name="other"/> parameter.
            Zero: This object is equal to <paramref name="other"/>.
            Greater than zero: This object is greater than <paramref name="other"/>.
            </returns>
            <remarks>The <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation of <paramref name="other"/> is used for the comparisson,
            i.e. ignoring white spaces etc.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.CompareTo(Dodoni.BasicComponents.IdentifierString)">
            <summary>Compares the current object with another object of type <see cref="T:System.String"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Less than zero: This object is less than the <paramref name="other"/> parameter.
            Zero: This object is equal to <paramref name="other"/>.
            Greater than zero: This object is greater than <paramref name="other"/>.
            </returns>
            <remarks>The <see cref="T:Dodoni.BasicComponents.IdentifierString"/> representation of <paramref name="other"/> is used for the comparisson,
            i.e. ignoring white spaces etc.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.Equals(Dodoni.BasicComponents.IdentifierString)">
            <summary>Indicates whether the current object is equal to another object of type <see cref="T:Dodoni.BasicComponents.IdentifierString"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.Equals(System.String)">
            <summary>Indicates whether the current object is equal to another object of type <see cref="T:System.String"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.GetHashCode">
            <summary>Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.Create(System.Enum,Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/>.
            </summary>
            <param name="value">The item of a specific enumeration.</param>
            <param name="enumStringRepresentationUsage">The method how to compute the string representation of <paramref name="value"/>.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/> instance that contains <paramref name="value"/> as well as some (perhaps language depending) string representation.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.GetValues(System.Type,Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage)">
            <summary>Retrieves a collection of the values of the constants in a specified enumeration in its <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/> representation.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <param name="enumStringRepresentationUsage">The method how to compute the string representation.</param>        
            <returns>A collection of <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/> objects that contains the items of the enumeration </returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="enumType"/> does not represents an enumeration.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.Create``1(``0,Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage)">
            <summary>Creates a new <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/>.
            </summary>
            <param name="value">The item of a specific enumeration.</param>
            <param name="enumStringRepresentationUsage">The method how to compute the string representation of <paramref name="value"/>.</param>
            <returns>A <see cref="T:Dodoni.BasicComponents.Utilities.EnumString`1"/> instance that contains <paramref name="value"/> as well as some (perhaps language depending) string representation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> does not represents the item of an enumeration.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.Parse(System.Type,System.String,Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage)">
            <summary>Converts the string representation of an enumeration item to its enumeration item equivalent.</summary>
            <param name="enumType">An enumeration type.</param>
            <param name="stringRepresentation">The <see cref="T:System.String"/> representation to search for.</param>
            <param name="enumStringRepresentationUsage">The method how to compute the string representation of the items of the
            enumeration represented by <paramref name="enumType"/>.</param>
            <returns>The item of the enumeration corresponds to <paramref name="stringRepresentation"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="enumType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if <paramref name="enumType"/> does not represent an enumeration.</exception>
            <exception cref="T:System.FormatException">Thrown, if there is no enumeration item with string representation <paramref name="stringRepresentation"/>.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.TryParse(System.Type,System.String,System.Enum@,Dodoni.BasicComponents.Utilities.EnumStringRepresentationUsage)">
            <summary>Converts the string representation of an enumeration item to its enumeration item equivalent.</summary>
            <param name="enumType">An enumeration type.</param>
            <param name="stringRepresentation">The <see cref="T:System.String"/> representation to search for.</param>
            <param name="value">The element of the enumeration with respect to <paramref name="stringRepresentation"/> (output).</param>
            <param name="enumStringRepresentationUsage">The method how to compute the string representation of the items of the
            enumeration represented by <paramref name="enumType"/>.</param>
            <returns>A value indicating whether <paramref name="value"/> contains valid data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown, if <paramref name="enumType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown, if <paramref name="enumType"/> does not represent an enumeration.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.op_Implicit(Dodoni.BasicComponents.Utilities.EnumString)~System.Enum">
            <summary>Performs an implicit conversion from <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/> to <see cref="T:System.Enum"/>.
            </summary>
            <param name="enumString">The <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/> object to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.op_Explicit(Dodoni.BasicComponents.Utilities.EnumString)~System.String">
            <summary>Performs an explicit conversion from <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="enumString">The <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/> object to convert.</param>
            <returns>The result of the conversion, i.e. the raw string representation component of <paramref name="enumString"/>.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.op_Explicit(Dodoni.BasicComponents.Utilities.EnumString)~Dodoni.BasicComponents.IdentifierString">
            <summary>Performs an explicit conversion from <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/> to <see cref="T:Dodoni.BasicComponents.IdentifierString"/>.
            </summary>
            <param name="enumString">The <see cref="T:Dodoni.BasicComponents.Utilities.EnumString"/> object to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.EnumString.GetFormatString(System.Enum,System.Resources.ResourceManager)">
            <summary>Gets the <see cref="T:System.String"/> representation of a specific enumeration item.
            </summary>
            <param name="value">The element of a specific enumeration.</param>
            <param name="resourceManager">The resource manager, perhaps <c>null</c> if no resource manager is available for <paramref name="value"/>.</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="value"/> taken into account the <paramref name="resourceManager"/>,
            i.e. <see cref="T:Dodoni.BasicComponents.Utilities.LanguageStringAttribute"/> if != <c>null</c>; otherwise <see cref="T:Dodoni.BasicComponents.Utilities.StringAttribute"/> is used if available; 
            otherwise the return value of the <c>ToString()</c> method of <paramref name="value"/> will be returned.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.Extensions">
            <summary>Serves as collection of general extension methods.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.Extensions.GetRawDistanceTo(System.DateTime,System.DateTime)">
            <summary>Gets a raw distance between two dates normalized by the number of days per year, i.e. a generic day count fraction.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <returns>The number of days in the time period over the number of days per year.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.Extensions.Shrink``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>Shrinks a specific enumeration.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="source">The source.</param>
            <param name="elementsToSkipAtTheBeginning">The number of elements to skip at the beginning of the enumeration.</param>
            <param name="elementsToSkipAtTheEnd">The number of elements to skip at the end of the enumeration.</param>
            <returns>The subset of the <paramref name="source"/> enumeration.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.Extensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>Searches an entire one-dimensional sorted IList for a specific element, using the generic IComparable interface 
            implemented by each element of the list and by the specified object.
            </summary>
            <typeparam name="T">The type of the elements of the list.</typeparam>
            <param name="list">The sorted one-dimensional, zero-based list to search.</param>
            <param name="value">The object to search for.</param>
            <returns>The index of the specified value in the specified list, if <paramref name="value"/> is found. If <paramref name="value"/> is not 
            found and <paramref name="value"/> is less than one or more elements in <paramref name="list"/>, a negative number which is the bitwise 
            complement of the index of the first element that is larger than <paramref name="value"/>. 
            If <paramref name="value"/> is not found and <paramref name="value"/> is greater than any of the elements in <paramref name="list"/>, 
            a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.Extensions.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>Searches an entire one-dimensional sorted IList for a specific element, using the generic IComparable interface 
            implemented by each element of the list and by the specified object.
            </summary>
            <typeparam name="T">The type of the elements of the list.</typeparam>
            <param name="list">The sorted one-dimensional, zero-based list to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <returns>The index of the specified value in the specified list, if <paramref name="value"/> is found. If <paramref name="value"/> is not 
            found and <paramref name="value"/> is less than one or more elements in <paramref name="list"/>, a negative number which is the bitwise 
            complement of the index of the first element that is larger than <paramref name="value"/>. 
            If <paramref name="value"/> is not found and <paramref name="value"/> is greater than any of the elements in <paramref name="list"/>, 
            a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.Extensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds a collection of items to the strongly typed list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The strongly typed list.</param>
            <param name="values">The items to add to the list.</param>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.Grouping`2">
            <summary>Serves as straight forward implementation for <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key of the <see cref="T:System.Linq.IGrouping`2"/>. This type parameter is covariant. That is, you can 
            use either the type you specified or any type that is more derived.</typeparam>
            <typeparam name="TElement">The type of the values in the <see cref="T:System.Linq.IGrouping`2"/></typeparam>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Grouping`2.m_Values">
            <summary>The internal collection of values.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.Grouping`2" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.Grouping`2.Key">
            <summary>Gets the key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <value>The key of the <see cref="T:System.Linq.IGrouping`2"/>.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.Grouping`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator{TElement}" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.Grouping`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.Grouping">
            <summary>Serves as factory for <see cref="T:System.Linq.IGrouping`2"/> objects.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.Grouping.Create``2(``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>Creates a specific <see cref="T:System.Linq.IGrouping`2"/> object.
            </summary>
            <typeparam name="TKey">The type of the key of the <see cref="T:System.Linq.IGrouping`2"/>. This type parameter is covariant. That is, you can 
            use either the type you specified or any type that is more derived.</typeparam>
            <typeparam name="TElement">The type of the values in the <see cref="T:System.Linq.IGrouping`2"/></typeparam>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <returns>The specified <see cref="T:System.Linq.IGrouping`2"/> object.</returns>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.DateInfo">
            <summary>Represents a date and a <see cref="T:System.String"/> object, for example the name of the holiday.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.DateInfo.NaD">
            <summary>Gets a <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/> which represents 'not a date'.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.DateInfo.MinValue">
            <summary>Represents the smallest possible value of <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/>. This field is read-only and corresponds to <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.DateInfo.MaxValue">
            <summary>Represents the largest possible value of <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/>. This field is read-only and corresponds to <see cref="F:System.DateTime.MaxValue"/>.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.DateInfo.DateTime">
            <summary>The <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.DateInfo.InfoString">
            <summary>The optional <see cref="T:System.String"/> object that describes this instance.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.#ctor(System.DateTime)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/> struct.
            </summary>
            <param name="dateTime">The date time.</param>
            <remarks>The time component of <paramref name="dateTime"/> will be ignored.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.#ctor(System.DateTime,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/> struct.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="infoString">The info string.</param>
            <remarks>The time component of <paramref name="dateTime"/> will be ignored.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/> struct.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/> struct.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="infoString">The info string.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.DateInfo.Date">
            <summary>Gets the date component of the instance.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.DateInfo.Day">
            <summary>Gets the day of the month represented by this instance.
            </summary>
            <value>The day.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.DateInfo.DayOfWeek">
            <summary>Gets the day of the week represented by this instance.
            </summary>
            <value>The day of week.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.DateInfo.DayOfYear">
            <summary>Gets the day of the year represented by this instance.
            </summary>
            <value>The day of year.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.DateInfo.Month">
            <summary>Gets the month component of the date represented by this instance.
            </summary>
            <value>The month.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.DateInfo.Year">
            <summary>Gets the year component of the date represented by this instance.
            </summary>
            <value>The year.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.ToString">
            <summary>Converts the value of the current <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/> object to its equivalent string representation.
            </summary>
            <returns>The string representation of the current instance.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.ToString(System.String)">
            <summary>Converts the value of the current <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/> object to its equivalent string representation.
            </summary>
            <param name="format">The format.</param>
            <returns>The string representation of the current instance.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.ToString(System.String,System.IFormatProvider)">
            <summary>Converts the value of the current <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/> object to its equivalent string representation.
            </summary>
            <param name="format">Some format convention for the string representation.</param>
            <param name="formatProvider">An object that implements the  <see cref="T:System.IFormatProvider"/> interface.</param>
            <returns>Returns the string representation of the current instance.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#GetTypeCode">
            <summary>Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A Boolean value equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A Unicode character equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.ToString(System.IFormatProvider)">
            <summary>Converts the value of the current <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/> object to its equivalent string representation.
            </summary>
            <param name="provider">An object that implements the <see cref="T:System.IFormatProvider"></see> 
            interface.</param>
            <returns>Returns the string representation of the current instance.
            </returns>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, 
            using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="conversionType"/> does not represents <see cref="T:System.DateTime"/> or <see cref="T:Dodoni.BasicComponents.Utilities.DateInfo"/>.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
            <exception cref="T:System.InvalidCastException">Will be thrown in any case.</exception>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.CompareTo(System.DateTime)">
            <summary>Compares the current object with another object of type <see cref="F:Dodoni.BasicComponents.Utilities.DateInfo.DateTime"/> and returns an indication of their relative values.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            <value>Less than zero: This object is less than the <paramref name="other"/> parameter.
            Zero: This object is equal to <paramref name="other"/>.
            Greater than zero: This object is greater than <paramref name="other"/>.
            </value></returns>
            <remarks>The info string will not be taken into account.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.CompareTo(Dodoni.BasicComponents.Utilities.DateInfo)">
            <summary>Compares this instance to a specified object of the same type and returns an indication of their relative values.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            <value>Less than zero: This object is less than the <paramref name="other"/> parameter.
            Zero: This object is equal to <paramref name="other"/>.
            Greater than zero: This object is greater than <paramref name="other"/>.
            </value></returns>
            <remarks>The info string will not be taken into account.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.Equals(System.DateTime)">
            <summary>Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
            <remarks>The info string will not be taken into account.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.DateInfo.Equals(Dodoni.BasicComponents.Utilities.DateInfo)">
            <summary>Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.</returns>
            <remarks>The info string will not be taken into account.</remarks>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.Month">
            <summary>The twelve months of the year.
            </summary>
            <remarks>The elements are in the same order as the months in <see cref="T:System.DateTime"/>.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.January">
            <summary>The month 'January'.
            </summary>
            <remarks>This month is represented by '1'.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.February">
            <summary>The month 'February'.
            </summary>
            <remarks>This month is represented by '2'.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.March">
            <summary>The month 'March'.
            </summary>
            <remarks>This month is represented by '3'.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.April">
            <summary>The month 'April'.
            </summary>
            <remarks>This month is represented by '4'.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.May">
            <summary>The month 'May'.
            </summary>
            <remarks>This month is represented by '5'.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.June">
            <summary>The month 'June'.
            </summary>
            <remarks>This month is represented by '6'.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.July">
            <summary>The month 'July'.
            </summary>
            <remarks>This month is represented by '7'.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.August">
            <summary>The month 'August'.
            </summary>
            <remarks>This month is represented by '8'.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.September">
            <summary>The month 'September'.
            </summary>
            <remarks>This month is represented by '9'.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.October">
            <summary>The month 'October'.
            </summary>
            <remarks>This month is represented by '10'.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.November">
            <summary>The month 'November'.
            </summary>
            <remarks>This month is represented by '11'.</remarks>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.Month.December">
            <summary>The month 'December'.
            </summary>
            <remarks>This month is represented by '12'.</remarks>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.TwoSideArray`1">
            <summary>Represents a two sided array, i.e. two arrays and some center element where the index can be negative as well.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.TwoSideArray`1.CenterElement">
            <summary>The center element.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.TwoSideArray`1.LeftArray">
            <summary>The left array.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.TwoSideArray`1.RightArray">
            <summary>The right array.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.TwoSideArray`1.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.TwoSideArray`1"/> class.
            </summary>
            <param name="leftArrayLength">The length of the left array.</param>
            <param name="rightArrayLength">The lenght of the right array.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.TwoSideArray`1.#ctor(`0[],System.Int32,`0[],System.Int32,`0)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.TwoSideArray`1"/> class.
            </summary>
            <param name="leftArray">The left array.</param>
            <param name="leftCount">The number of items in <paramref name="leftArray"/> to take into account.</param>
            <param name="rightArray">The right array.</param>
            <param name="rightCount">The number of item in <paramref name="rightArray"/> to take into account.</param>
            <param name="centerElement">The center element.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.TwoSideArray`1.Count">
            <summary>Gets the number of elements.
            </summary>
            <value>The number of elements.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.TwoSideArray`1.LeftCount">
            <summary>Gets the number of elements with negative index.
            </summary>
            <value>The number of elements with negative index.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.TwoSideArray`1.RightCount">
            <summary>Gets the number of elements with strict positive index.
            </summary>
            <value>The number of elements with strict positive index.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.TwoSideArray`1.Item(System.Int32)">
            <summary>Gets or sets the  <typeparamref name="T"/> at the specified index.
            </summary>
            <value>The element with the given index.</value>
        </member>
        <member name="T:Dodoni.BasicComponents.Utilities.TwoSideList`1">
            <summary>Represents a two sided list, i.e. two instances of <see cref="T:System.Collections.Generic.List`1"/> and some center element where
            the index can be negative as well.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.TwoSideList`1.CenterElement">
            <summary>The center element.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.TwoSideList`1.LeftList">
            <summary>The left list.
            </summary>
        </member>
        <member name="F:Dodoni.BasicComponents.Utilities.TwoSideList`1.RightList">
            <summary>The right list.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.TwoSideList`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.TwoSideList`1"/> class.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.TwoSideList`1.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Dodoni.BasicComponents.Utilities.TwoSideList`1"/> class.
            </summary>
            <param name="capacity">The number of elements that the new list can initialize store for each direction.</param>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.TwoSideList`1.Count">
            <summary>Gets the number of elements.
            </summary>
            <value>The number of elements.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.TwoSideList`1.LeftCount">
            <summary>Gets the number of elements with negative index.
            </summary>
            <value>The number of elements with negative index.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.TwoSideList`1.RightCount">
            <summary>Gets the number of elements with strict positive index.
            </summary>
            <value>The number of elements with strict positive index.</value>
        </member>
        <member name="P:Dodoni.BasicComponents.Utilities.TwoSideList`1.Item(System.Int32)">
            <summary>Gets or sets the <typeparamref name="T"/> at the specified index.
            </summary>
            <value>The element with the given index.</value>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.TwoSideList`1.AddRight(`0)">
            <summary>Adds an element on the right side.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.TwoSideList`1.AddLeft(`0)">
            <summary>Adds an element on the left side.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.TwoSideList`1.Add(`0,`0)">
            <summary>Adds an element on the left and a second element on the right side.
            </summary>
            <param name="leftValue">The left value.</param>
            <param name="rightValue">The right value.</param>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.TwoSideList`1.Clear">
            <summary>Removes all elements from the list, the <see cref="F:Dodoni.BasicComponents.Utilities.TwoSideList`1.CenterElement"/> will be set to the default value.
            </summary>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.TwoSideList`1.RemoveSubList(System.Int32)">
            <summary>Removes a sub-list.
            </summary>
            <param name="index">The position where to start removing elements.</param>
            <remarks>The element at position <paramref name="index"/> will be removed as well but the center element will not be removed.</remarks>
        </member>
        <member name="M:Dodoni.BasicComponents.Utilities.TwoSideList`1.SymmetricClear(System.Int32)">
            <summary>Remove two symmetric sub-lists from the internal list.
            </summary>
            <param name="index">The position where to start removing elements in both directions, i.e. also with the negative index.</param>
            <remarks>The center element will not be removed.</remarks>
        </member>
    </members>
</doc>
